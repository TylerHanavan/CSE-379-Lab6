


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             library, CODE, READWRITE
    2 00000000                 EXPORT           uart_init
    3 00000000                 EXPORT           pin_connect_block_setup_for_uar
t0
    4 00000000                 EXPORT           setup_pins
    5 00000000                 EXPORT           validate_input
    6 00000000                 EXPORT           toggle_seven_seg
    7 00000000                 EXPORT           read_character
    8 00000000                 EXPORT           output_character
    9 00000000                 EXPORT           output_string
   10 00000000                 EXPORT           new_line
   11 00000000                 EXPORT           clear_display
   12 00000000                 EXPORT           change_display
   13 00000000         
   14 00000000                 EXPORT           change_display_digit
   15 00000000                 EXPORT           get_digit
   16 00000000         
   17 00000000                 EXPORT           from_ascii
   18 00000000         
   19 00000000                 EXPORT           store_input
   20 00000000         
   21 00000000 74 65 73 
              74 31 00 test    =                "test1",0
   22 00000006 20 20 20 
              20 00    input   =                "    ",0
   23 0000000B 30 00   in_count
                               =                "0",0
   24 0000000D 00 00 00        ALIGN
   25 00000010         
   26 00000010         digits_SET
   27 00000010 00003780        DCD              0x00003780  ; 0 
   28 00000014 00003000        DCD              0x00003000  ; 1  
   29 00000018 00009580        DCD              0x00009580  ; 2
   30 0000001C 00008780        DCD              0x00008780  ; 3
   31 00000020 0000A300        DCD              0x0000A300  ; 4
   32 00000024 0000A680        DCD              0x0000A680  ; 5
   33 00000028 0000B680        DCD              0x0000B680  ; 6
   34 0000002C 00000380        DCD              0x00000380  ; 7
   35 00000030 0000B780        DCD              0x0000B780  ; 8
   36 00000034 0000A380        DCD              0x0000A380  ; 9
   37 00000038 0000B380        DCD              0x0000B380  ; A
   38 0000003C 0000B600        DCD              0x0000B600  ; B
   39 00000040 00003480        DCD              0x00003480  ; C
   40 00000044 00009700        DCD              0x00009700  ; D
   41 00000048 0000B480        DCD              0x0000B480  ; E
   42 0000004C 0000B080        DCD              0x0000B080  ; F 
   43 00000050                 ALIGN
   44 00000050         
   45 00000050         uart_init
   46 00000050 E92D4000        STMFD            SP!,{lr}    ;push link register
                                                             to stack
   47 00000054 E59F0348        LDR              r0, =0xE000C00C ;loads the memo
                                                            ry address 0xE000C0
                                                            0C into r0
   48 00000058 E3A01083        MOV              r1, #131    ;copies decimal 131
                                                             into r1
   49 0000005C E5801000        STR              r1, [r0]    ;stores r1 into the
                                                             memory address at 
                                                            r0



ARM Macro Assembler    Page 2 


   50 00000060 E59F0340        LDR              r0, =0xE000C000 ;loads the memo
                                                            ry address 0xE000C0
                                                            00 into r0
   51 00000064 E3A01078        MOV              r1, #120    ;copies decimal 120
                                                             into r1
   52 00000068 E5801000        STR              r1, [r0]    ;stores r1 into the
                                                             memory address at 
                                                            r0
   53 0000006C E59F0338        LDR              r0, =0xE000C004 ;loads the memo
                                                            ry address 0xE000C0
                                                            04 into r0
   54 00000070 E3A01000        MOV              r1, #0      ;copies decimal 0 i
                                                            nto r1
   55 00000074 E5801000        STR              r1, [r0]    ;stores r1 into the
                                                             memory address at 
                                                            r0
   56 00000078 E59F0324        LDR              r0, =0xE000C00C ;loads the memo
                                                            ry address 0xE000C0
                                                            0C into r0
   57 0000007C E3A01003        MOV              r1, #3      ;copies decimal 3 i
                                                            nto r1
   58 00000080 E5801000        STR              r1, [r0]    ;stores r1 into the
                                                             memory address at 
                                                            r0
   59 00000084 E8BD4000        LDMFD            sp!, {lr}   ;pop link register 
                                                            from stack
   60 00000088 E12FFF1E        BX               lr          ;move pc,lr
   61 0000008C         
   62 0000008C         
   63 0000008C         pin_connect_block_setup_for_uart0
   64 0000008C E92D4003        STMFD            sp!, {r0, r1, lr} ;Push stack
   65 00000090 E59F0318        LDR              r0, =0xE002C000 ; PINSEL0 load 
                                                            pinsel0 r0
   66 00000094 E5901000        LDR              r1, [r0]    ;Load pinsel0 conte
                                                            nts to r1
   67 00000098 E3811005        ORR              r1, r1, #5  ; Or with 5 dec.
   68 0000009C E3C1100A        BIC              r1, r1, #0xA 
                                                            ; Clear against 0xA
                                                            
   69 000000A0 E5801000        STR              r1, [r0]    ; Store results to 
                                                            r0 in memory
   70 000000A4 E8BD4003        LDMFD            sp!, {r0, r1, lr} ;Pop stack
   71 000000A8 E12FFF1E        BX               lr          ;Branch back
   72 000000AC         
   73 000000AC         setup_pins
   74 000000AC E92D400E        STMFD            SP!,{lr, r1, r2, r3}
   75 000000B0         
   76 000000B0 E59F12FC        LDR              r1, =0xE0028008 ;IODIR for Seve
                                                            n-Seg
   77 000000B4 E59F32FC        LDR              r3, =0xB784 ;Load 0xB784 (for b
                                                            it manipulation) to
                                                             r3
   78 000000B8 E5813000        STR              r3, [r1]    ;store results to r
                                                            1
   79 000000BC         
   80 000000BC E8BD400E        LDMFD            sp!, {lr, r1, r2, r3}
   81 000000C0 E12FFF1E        BX               lr
   82 000000C4         
   83 000000C4         validate_input                       ;checks that the in



ARM Macro Assembler    Page 3 


                                                            putted value (r0) i
                                                            s either hexadecima
                                                            l or 'q'
   84 000000C4 E92D400E        STMFD            SP!, {lr, r1, r2, r3} ;returns 
                                                            output as boolean i
                                                            n (r4)
   85 000000C8         
   86 000000C8 E3500071        CMP              r0, #0x71   ;'q'
   87 000000CC 0A0000B3        BEQ              quit
   88 000000D0         
   89 000000D0 E350000D        CMP              r0, #0xD
   90 000000D4 0A000009        BEQ              vi_valid_number
   91 000000D8         
   92 000000D8 E3590000        CMP              r9, #0      ;not accepting inpu
                                                            t (bar 'q') when di
                                                            splay is off
   93 000000DC 0A00000B        BEQ              vi_invalid
   94 000000E0         
   95 000000E0 E3500030        CMP              r0, #0x30   ;<0x30 invalid
   96 000000E4 BA000009        BLT              vi_invalid
   97 000000E8         
   98 000000E8 E3500046        CMP              r0, #0x46   ;>0x66 invalid
   99 000000EC CA000007        BGT              vi_invalid
  100 000000F0         
  101 000000F0 E3500039        CMP              r0, #0x39   ;<=0x39 valid numbe
                                                            r
  102 000000F4 DA000001        BLE              vi_valid_number
  103 000000F8         
  104 000000F8 E3500041        CMP              r0, #0x41   ;>=0x41 valid upper
                                                            case letter
  105 000000FC AA000001        BGE              vi_valid_letter_upper
  106 00000100         
  107 00000100         vi_valid_number
  108 00000100         
  109 00000100 E3A04001        MOV              r4, #1      ;return 1 for r4
  110 00000104         
  111 00000104 EA000002        B                vi_exit
  112 00000108         
  113 00000108         vi_valid_letter_upper
  114 00000108         
  115 00000108 E3A04001        MOV              r4, #1      ;return 1 for r4
  116 0000010C         
  117 0000010C EA000000        B                vi_exit
  118 00000110         
  119 00000110         vi_invalid
  120 00000110         
  121 00000110 E3A04000        MOV              r4, #0      ;return 0 for r4
  122 00000114         
  123 00000114         vi_exit
  124 00000114         
  125 00000114 E8BD400E        LDMFD            SP!, {lr, r1, r2, r3}
  126 00000118 E12FFF1E        BX               lr
  127 0000011C         
  128 0000011C         get_digit                            ; returns (in r4) t
                                                            he hexadecimal numb
                                                            er's (globally at r
                                                            8) digit r0
  129 0000011C         ; last-most digit is 0, first-most digit is n where n is
                        number of steps needed to get to said digit



ARM Macro Assembler    Page 4 


  130 0000011C         
  131 0000011C E92D402E        STMFD            SP!, {lr, r1, r2, r3, r5}
  132 00000120         
  133 00000120 E3A0100F        MOV              r1, #0xF
  134 00000124 E1A02008        MOV              r2, r8
  135 00000128 E3A03000        MOV              r3, #0
  136 0000012C         
  137 0000012C E3500000        CMP              r0, #0
  138 00000130 0A000005        BEQ              get_digit_0
  139 00000134         
  140 00000134 E3500001        CMP              r0, #1
  141 00000138 0A000009        BEQ              get_digit_1
  142 0000013C         
  143 0000013C E3500002        CMP              r0, #2
  144 00000140 0A00000E        BEQ              get_digit_2
  145 00000144         
  146 00000144 E3500003        CMP              r0, #3
  147 00000148 0A000013        BEQ              get_digit_3
  148 0000014C         
  149 0000014C         get_digit_0
  150 0000014C         
  151 0000014C E0022001        AND              r2, r2, r1
  152 00000150         
  153 00000150         get_digit_0_loop
  154 00000150         
  155 00000150 E3520000        CMP              r2, #0
  156 00000154 0A000018        BEQ              get_digit_end
  157 00000158         
  158 00000158 E2833001        ADD              r3, r3, #1
  159 0000015C E2422001        SUB              r2, r2, #1
  160 00000160         
  161 00000160 EAFFFFFA        B                get_digit_0_loop
  162 00000164         
  163 00000164         
  164 00000164         get_digit_1
  165 00000164         
  166 00000164 E1A01201        MOV              r1, r1, LSL #4
  167 00000168         
  168 00000168 E0022001        AND              r2, r2, r1
  169 0000016C         
  170 0000016C         get_digit_1_loop
  171 0000016C         
  172 0000016C E352000F        CMP              r2, #0xF
  173 00000170 DA000011        BLE              get_digit_end
  174 00000174         
  175 00000174 E2833001        ADD              r3, r3, #1
  176 00000178 E2422010        SUB              r2, r2, #0x10
  177 0000017C         
  178 0000017C EAFFFFF3        B                get_digit_0_loop
  179 00000180         
  180 00000180         get_digit_2
  181 00000180         
  182 00000180 E1A01401        MOV              r1, r1, LSL #8
  183 00000184         
  184 00000184 E0022001        AND              r2, r2, r1
  185 00000188         
  186 00000188         get_digit_2_loop
  187 00000188         
  188 00000188 E35200FF        CMP              r2, #0xFF



ARM Macro Assembler    Page 5 


  189 0000018C DA00000A        BLE              get_digit_end
  190 00000190         
  191 00000190 E2833001        ADD              r3, r3, #1
  192 00000194 E2422C01        SUB              r2, r2, #0x100
  193 00000198         
  194 00000198 EAFFFFFA        B                get_digit_2_loop
  195 0000019C         
  196 0000019C         get_digit_3
  197 0000019C         
  198 0000019C E1A01601        MOV              r1, r1, LSL #12
  199 000001A0         
  200 000001A0 E0022001        AND              r2, r2, r1
  201 000001A4         
  202 000001A4         get_digit_3_loop
  203 000001A4         
  204 000001A4 E59F5210        LDR              r5, =0xFFF
  205 000001A8         
  206 000001A8 E1520005        CMP              r2, r5
  207 000001AC DA000002        BLE              get_digit_end
  208 000001B0         
  209 000001B0 E2833001        ADD              r3, r3, #1
  210 000001B4 E2422A01        SUB              r2, r2, #0x1000
  211 000001B8         
  212 000001B8 EAFFFFF9        B                get_digit_3_loop
  213 000001BC         
  214 000001BC         get_digit_end
  215 000001BC         
  216 000001BC E1A04003        MOV              r4, r3
  217 000001C0         
  218 000001C0 E8BD402E        LDMFD            SP!, {lr, r1, r2, r3, r5}
  219 000001C4 E12FFF1E        BX               lr
  220 000001C8         
  221 000001C8         from_ascii                           ; converts (singe-d
                                                            igit) number at r0 
                                                            from ascii number t
                                                            o normal number, re
                                                            turning at r4
  222 000001C8 E92D400E        STMFD            SP!, {lr, r1, r2, r3}
  223 000001CC         
  224 000001CC E3500039        CMP              r0, #0x39
  225 000001D0 DA000000        BLE              fa_number
  226 000001D4         
  227 000001D4 EA000001        B                fa_upper
  228 000001D8         
  229 000001D8         fa_number
  230 000001D8         
  231 000001D8 E2404030        SUB              r4, r0, #0x30
  232 000001DC         
  233 000001DC EA000001        B                fa_exit
  234 000001E0         
  235 000001E0         fa_upper
  236 000001E0         
  237 000001E0 E2404041        SUB              r4, r0, #0x41
  238 000001E4 E284400A        ADD              r4, r4, #10
  239 000001E8         
  240 000001E8         fa_exit
  241 000001E8         
  242 000001E8 E8BD400E        LDMFD            SP!, {lr, r1, r2, r3}
  243 000001EC E12FFF1E        BX               lr



ARM Macro Assembler    Page 6 


  244 000001F0         
  245 000001F0         toggle_seven_seg
  246 000001F0 E92D4001        STMFD            SP!, {lr, r0}
  247 000001F4         
  248 000001F4 E3590000        CMP              r9, #0      ;check if seven seg
                                                             is off
  249 000001F8 1A000003        BNE              tss_off
  250 000001FC         
  251 000001FC         tss_on
  252 000001FC         
  253 000001FC E3A09001        MOV              r9, #1      ;set the flag to #1
                                                             (r9) to say seven 
                                                            seg is on
  254 00000200         
  255 00000200 E1A00006        MOV              r0, r6
  256 00000204         
  257 00000204 EBFFFFFE        BL               change_display ;change display
  258 00000208         
  259 00000208 EA000001        B                tss_exit
  260 0000020C         
  261 0000020C         tss_off
  262 0000020C         
  263 0000020C E3A09000        MOV              r9, #0      ;set the flag to #0
                                                             (r9) to say seven 
                                                            seg is off
  264 00000210 EBFFFFFE        BL               clear_display ;clear (turn off)
                                                             display
  265 00000214         
  266 00000214         tss_exit
  267 00000214         
  268 00000214 E8BD4001        LDMFD            SP!, {lr, r0}
  269 00000218 E12FFF1E        BX               lr
  270 0000021C         
  271 0000021C         change_display                       ;Displays hex value
                                                             passed in r0
  272 0000021C E92D400E        STMFD            SP!,{lr, r1, r2, r3}
  273 00000220         
  274 00000220 E3A09001        MOV              r9, #1
  275 00000224 E1A06000        MOV              r6, r0
  276 00000228         
  277 00000228 E59F1190        LDR              r1, =0xE0028000 ; Base address 
                                                            
  278 0000022C E59F3190        LDR              r3, =digits_SET
  279 00000230 E1A00100        MOV              r0, r0, LSL #2 ; Each stored va
                                                            lue is 32 bits 
  280 00000234 E7932000        LDR              r2, [r3, r0] ; Load IOSET patte
                                                            rn for digit in r0 
                                                            
  281 00000238 E5812004        STR              r2, [r1, #4] ; Display (0x4 = o
                                                            ffset to IOSET) 
  282 0000023C         
  283 0000023C E8BD400E        LDMFD            sp!, {lr, r1, r2, r3}
  284 00000240 E12FFF1E        BX               lr
  285 00000244         
  286 00000244         change_display_digit                 ;Displays hex value
                                                             passed in r0 at di
                                                            git r4
  287 00000244 E92D402E        STMFD            SP!,{lr, r1, r2, r3, r5}
  288 00000248         



ARM Macro Assembler    Page 7 


  289 00000248 E3A09001        MOV              r9, #1
  290 0000024C E1A06000        MOV              r6, r0      ; Save our r0 at r6
                                                            
  291 00000250         
  292 00000250 E3A05001        MOV              r5, #1      ; Initial 1 for sel
                                                            ecting which pin to
                                                             HIGH
  293 00000254         
  294 00000254 E2844002        ADD              r4, #0x2    ; DIGIT SEL IS OFFS
                                                            ET BY 2. BEGINS AT 
                                                            PIN 2. r4 + 2 is pi
                                                            n that gets HIGH'd
  295 00000258         
  296 00000258 E1A05415        MOV              r5, r5, LSL r4 ; Shift initial 
                                                            1 bit by r4
  297 0000025C         
  298 0000025C E1E05005        MVN              r5, r5      ; High all bits bes
                                                            ides r4 (DIGIT SEL 
                                                            IS OFFSET BY 2. BEG
                                                            INS AT PIN 2. 0 & 1
                                                             RESERVED)
  299 00000260         ;ADD r5, r5, #1
  300 00000260         
  301 00000260 E205503C        AND              r5, r5, #0x3C ; Clear all bits 
                                                            (AND) besides 6 bit
                                                            s in 0x3C. Will be 
                                                            used in later OR
  302 00000264         
  303 00000264 E59F1154        LDR              r1, =0xE0028000 ; Base address 
                                                            for 7seg
  304 00000268 E59F3154        LDR              r3, =digits_SET
  305 0000026C E1A00100        MOV              r0, r0, LSL #2 ; Each stored va
                                                            lue is 32 bits 
  306 00000270 E0833000        ADD              r3, r0
  307 00000274 E5932000        LDR              r2, [r3]    ; Load IOSET patter
                                                            n for digit in r0 
  308 00000278 E1822005        ORR              r2, r2, r5  ; HIGH bits not bei
                                                            ng used (HIGH-OFF T
                                                            O CHOOSE DIGIT)
  309 0000027C E5812004        STR              r2, [r1, #4] ; Display (0x4 = o
                                                            ffset to IOSET) 
  310 00000280         
  311 00000280 E8BD402E        LDMFD            sp!, {lr, r1, r2, r3, r5}
  312 00000284 E12FFF1E        BX               lr
  313 00000288         
  314 00000288         clear_display
  315 00000288 E92D4006        STMFD            SP!,{lr, r1, r2}
  316 0000028C         
  317 0000028C E3A09000        MOV              r9, #0
  318 00000290         
  319 00000290 E59F1130        LDR              r1, =0xE002800C 
                                                            ;Load P0xCLR to r1
  320 00000294 E59F211C        LDR              r2, =0xB784 ;Load number (to r2
                                                            ) for bits of seven
                                                            -segment display
  321 00000298 E5812000        STR              r2, [r1]    ;Store number in P0
                                                            xClr at r1
  322 0000029C         
  323 0000029C E8BD4006        LDMFD            sp!, {lr, r1, r2}



ARM Macro Assembler    Page 8 


  324 000002A0 E12FFF1E        BX               lr
  325 000002A4         
  326 000002A4         read_character                       ;Begin Receive Char
                                                            acter block
  327 000002A4 E92D4038        STMFD            SP!,{lr, r3, r4, r5}
  328 000002A8         read_character_2
  329 000002A8 E59F311C        LDR              r3, =0xE000C014 ;loads the addr
                                                            ess of uart0 into r
                                                            egister r3 
  330 000002AC         
  331 000002AC E5D34000        LDRB             r4, [r3]    ;loads the bytes at
                                                             address r3 into r4
                                                             (RXFE - RDR)
  332 000002B0         
  333 000002B0 E3A05001        MOV              r5, #1      ;immediate value 1 
                                                            is copied into r5
  334 000002B4 E0045005        AND              r5, r4, r5  ;logically AND r4 a
                                                            nd r5 to compare th
                                                            e LSB(RDR) of r4
  335 000002B8         
  336 000002B8         ;CMP r5, #1   ;if the value of r5 is one, we are ready t
                       o receive data
  337 000002B8         ;BNE read_character_2  ;else redo the process
  338 000002B8         
  339 000002B8         ; Receiving
  340 000002B8         
  341 000002B8 E59F30E8        LDR              r3, =0xE000C000 ;loads the addr
                                                            ess of the receive 
                                                            buffer register int
                                                            o r5
  342 000002BC E5930000        LDR              r0, [r3]    ;hex value at r3 is
                                                             loaded into r0
  343 000002C0         read_character_break
  344 000002C0 E8BD4038        LDMFD            sp!, {lr, r3, r4, r5}
  345 000002C4 E12FFF1E        BX               lr
  346 000002C8         
  347 000002C8         output_character                     ;Begin Transmit Cha
                                                            racter block
  348 000002C8 E92D4068        STMFD            SP!,{lr, r3, r6, r5}
  349 000002CC         output_character_2
  350 000002CC E59F30F8        LDR              r3, =0xE000C014 ;loads address 
                                                            of uart0 into regis
                                                            ter r3
  351 000002D0         
  352 000002D0 E5D36000        LDRB             r6, [r3]    ;loads bytes at add
                                                            ress r3 into r6 (RX
                                                            FE - RDR)
  353 000002D4         
  354 000002D4 E3A05020        MOV              r5, #32     ;immediate value 32
                                                             (00010000) copied 
                                                            into r5  
  355 000002D8 E0065005        AND              r5, r6, r5  ;logically AND r6 a
                                                            nd r5 to compare th
                                                            e 5th bit(THRE) of 
                                                            r6
  356 000002DC         
  357 000002DC E3550020        CMP              r5, #32     ;if the fifth bit i
                                                            s 1, then we are re
                                                            ady to transmit



ARM Macro Assembler    Page 9 


  358 000002E0 1AFFFFF9        BNE              output_character_2 ;else we red
                                                            o the process
  359 000002E4         
  360 000002E4         ; Transmitting
  361 000002E4         
  362 000002E4 E59F50BC        LDR              r5, =0xE000C000 ;loads the addr
                                                            ess of the transmit
                                                             holding register (
                                                            same as receive buf
                                                            fer)
  363 000002E8         
  364 000002E8 E5850000        STR              r0, [r5]    ;stores the value o
                                                            f r0 into the addre
                                                            ss at r5
  365 000002EC E8BD4068        LDMFD            sp!, {lr, r3, r6, r5}
  366 000002F0 E12FFF1E        BX               lr
  367 000002F4         
  368 000002F4         output_string
  369 000002F4 E92D4003        STMFD            SP!,{lr, r0, r1}
  370 000002F8         
  371 000002F8         output_string_2
  372 000002F8 E4D40001        LDRB             r0, [r4], #1 ;Load =prompt cont
                                                            ents from memory (r
                                                            4) to r0, one byte 
                                                            at a time. Then inc
                                                            rements memory addr
                                                            ess, r4, by 1.
  373 000002FC EBFFFFFE        BL               output_character ;Branch and li
                                                            nk to output_charac
                                                            ter
  374 00000300         
  375 00000300 E3500000        CMP              r0,#0       ;compares r0 to nul
                                                            l terminator
  376 00000304 1AFFFFFB        BNE              output_string_2 ;if equal we co
                                                            ntinue on with prog
                                                            ram
  377 00000308         
  378 00000308 EBFFFFFE        BL               new_line
  379 0000030C         
  380 0000030C E8BD4003        LDMFD            sp!, {lr, r0, r1}
  381 00000310 E12FFF1E        BX               lr
  382 00000314         
  383 00000314         new_line
  384 00000314 E92D4400        STMFD            SP!,{lr, r10}
  385 00000318 E1A0A000        MOV              r10, r0     ;saves contents of 
                                                            r0 into r10 before 
                                                            using it
  386 0000031C E3A0000A        MOV              r0, #0xA    ;new line character
                                                             copied into r0
  387 00000320 EBFFFFFE        BL               output_character ;branch and li
                                                            nk to output charac
                                                            ter
  388 00000324 E3A0000D        MOV              r0, #0xD    ;carriage return co
                                                            pied into r0
  389 00000328 EBFFFFFE        BL               output_character ;branch and li
                                                            nk to output charac
                                                            ter
  390 0000032C E1A0000A        MOV              r0, r10     ;takes saved conten
                                                            t from r10 and copi



ARM Macro Assembler    Page 10 


                                                            es into r0
  391 00000330 E8BD4400        LDMFD            sp!, {lr, r10}
  392 00000334 E12FFF1E        BX               lr
  393 00000338         
  394 00000338         store_input
  395 00000338 E92D403E        STMFD            SP!, {lr, r1-r5}
  396 0000033C         
  397 0000033C         ; IN r0 - contents of key pressed
  398 0000033C         
  399 0000033C E1A03000        MOV              r3, r0
  400 00000340         
  401 00000340 E59F0088        LDR              r0, =in_count ; Load in_count a
                                                            ddress
  402 00000344 EB000011        BL               from_mem    ; Get value of in_c
                                                            ount
  403 00000348         
  404 00000348 E1A00001        MOV              r0, r1
  405 0000034C EBFFFFFE        BL               from_ascii
  406 00000350         
  407 00000350 E1A01004        MOV              r1, r4
  408 00000354         
  409 00000354 E59F0078        LDR              r0, =input  ; Load input addres
                                                            s
  410 00000358 E0800001        ADD              r0, r0, r1  ; Pre-increment r0 
                                                            (address) by r1 (# 
                                                            of elements). 
  411 0000035C         
  412 0000035C E1A04001        MOV              r4, r1
  413 00000360         
  414 00000360 E1A01003        MOV              r1, r3
  415 00000364         
  416 00000364 EB000005        BL               to_mem
  417 00000368         
  418 00000368 E59F0060        LDR              r0, =in_count
  419 0000036C E1A01004        MOV              r1, r4
  420 00000370 E2811001        ADD              r1, r1, #1
  421 00000374         
  422 00000374 EB000001        BL               to_mem
  423 00000378         
  424 00000378 E8BD403E        LDMFD            SP!, {lr, r1-r5}
  425 0000037C E12FFF1E        BX               lr
  426 00000380         
  427 00000380         to_mem                               ;r0 - memory addres
                                                            s, r1 - contents
  428 00000380 E92D403C        STMFD            SP!, {lr, r2-r5}
  429 00000384         
  430 00000384 E5C01000        STRB             r1, [r0]
  431 00000388         
  432 00000388 E8BD403C        LDMFD            SP!, {lr, r2-r5}
  433 0000038C E12FFF1E        BX               lr
  434 00000390         
  435 00000390         from_mem                             ;r0 - memory addres
                                                            s, return contents 
                                                            - r1
  436 00000390 E92D403C        STMFD            SP!, {lr, r2-r5}
  437 00000394         
  438 00000394 E5D01000        LDRB             r1, [r0]
  439 00000398         
  440 00000398 E8BD403C        LDMFD            SP!, {lr, r2-r5}



ARM Macro Assembler    Page 11 


  441 0000039C E12FFF1E        BX               lr
  442 000003A0         
  443 000003A0         
  444 000003A0         
  445 000003A0         quit
  446 000003A0 E3A07005        MOV              r7, #5
  447 000003A4                 END
              E000C00C 
              E000C000 
              E000C004 
              E002C000 
              E0028008 
              0000B784 
              00000FFF 
              E0028000 
              00000000 
              E002800C 
              E000C014 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\library.d -o.\objects\library.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\A
RM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --pre
define="__UVISION_VERSION SETA 524" --list=.\listings\library.lst library.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

change_display 0000021C

Symbol: change_display
   Definitions
      At line 271 in file library.s
   Uses
      At line 12 in file library.s
      At line 257 in file library.s

change_display_digit 00000244

Symbol: change_display_digit
   Definitions
      At line 286 in file library.s
   Uses
      At line 14 in file library.s
Comment: change_display_digit used once
clear_display 00000288

Symbol: clear_display
   Definitions
      At line 314 in file library.s
   Uses
      At line 11 in file library.s
      At line 264 in file library.s

digits_SET 00000010

Symbol: digits_SET
   Definitions
      At line 26 in file library.s
   Uses
      At line 278 in file library.s
      At line 304 in file library.s

fa_exit 000001E8

Symbol: fa_exit
   Definitions
      At line 240 in file library.s
   Uses
      At line 233 in file library.s
Comment: fa_exit used once
fa_number 000001D8

Symbol: fa_number
   Definitions
      At line 229 in file library.s
   Uses
      At line 225 in file library.s
Comment: fa_number used once
fa_upper 000001E0

Symbol: fa_upper
   Definitions
      At line 235 in file library.s
   Uses
      At line 227 in file library.s
Comment: fa_upper used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

from_ascii 000001C8

Symbol: from_ascii
   Definitions
      At line 221 in file library.s
   Uses
      At line 17 in file library.s
      At line 405 in file library.s

from_mem 00000390

Symbol: from_mem
   Definitions
      At line 435 in file library.s
   Uses
      At line 402 in file library.s
Comment: from_mem used once
get_digit 0000011C

Symbol: get_digit
   Definitions
      At line 128 in file library.s
   Uses
      At line 15 in file library.s
Comment: get_digit used once
get_digit_0 0000014C

Symbol: get_digit_0
   Definitions
      At line 149 in file library.s
   Uses
      At line 138 in file library.s
Comment: get_digit_0 used once
get_digit_0_loop 00000150

Symbol: get_digit_0_loop
   Definitions
      At line 153 in file library.s
   Uses
      At line 161 in file library.s
      At line 178 in file library.s

get_digit_1 00000164

Symbol: get_digit_1
   Definitions
      At line 164 in file library.s
   Uses
      At line 141 in file library.s
Comment: get_digit_1 used once
get_digit_1_loop 0000016C

Symbol: get_digit_1_loop
   Definitions
      At line 170 in file library.s
   Uses
      None
Comment: get_digit_1_loop unused
get_digit_2 00000180



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols


Symbol: get_digit_2
   Definitions
      At line 180 in file library.s
   Uses
      At line 144 in file library.s
Comment: get_digit_2 used once
get_digit_2_loop 00000188

Symbol: get_digit_2_loop
   Definitions
      At line 186 in file library.s
   Uses
      At line 194 in file library.s
Comment: get_digit_2_loop used once
get_digit_3 0000019C

Symbol: get_digit_3
   Definitions
      At line 196 in file library.s
   Uses
      At line 147 in file library.s
Comment: get_digit_3 used once
get_digit_3_loop 000001A4

Symbol: get_digit_3_loop
   Definitions
      At line 202 in file library.s
   Uses
      At line 212 in file library.s
Comment: get_digit_3_loop used once
get_digit_end 000001BC

Symbol: get_digit_end
   Definitions
      At line 214 in file library.s
   Uses
      At line 156 in file library.s
      At line 173 in file library.s
      At line 189 in file library.s
      At line 207 in file library.s

in_count 0000000B

Symbol: in_count
   Definitions
      At line 23 in file library.s
   Uses
      At line 401 in file library.s
      At line 418 in file library.s

input 00000006

Symbol: input
   Definitions
      At line 22 in file library.s
   Uses
      At line 409 in file library.s
Comment: input used once



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

library 00000000

Symbol: library
   Definitions
      At line 1 in file library.s
   Uses
      None
Comment: library unused
new_line 00000314

Symbol: new_line
   Definitions
      At line 383 in file library.s
   Uses
      At line 10 in file library.s
      At line 378 in file library.s

output_character 000002C8

Symbol: output_character
   Definitions
      At line 347 in file library.s
   Uses
      At line 8 in file library.s
      At line 373 in file library.s
      At line 387 in file library.s
      At line 389 in file library.s

output_character_2 000002CC

Symbol: output_character_2
   Definitions
      At line 349 in file library.s
   Uses
      At line 358 in file library.s
Comment: output_character_2 used once
output_string 000002F4

Symbol: output_string
   Definitions
      At line 368 in file library.s
   Uses
      At line 9 in file library.s
Comment: output_string used once
output_string_2 000002F8

Symbol: output_string_2
   Definitions
      At line 371 in file library.s
   Uses
      At line 376 in file library.s
Comment: output_string_2 used once
pin_connect_block_setup_for_uart0 0000008C

Symbol: pin_connect_block_setup_for_uart0
   Definitions
      At line 63 in file library.s
   Uses
      At line 3 in file library.s



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

Comment: pin_connect_block_setup_for_uart0 used once
quit 000003A0

Symbol: quit
   Definitions
      At line 445 in file library.s
   Uses
      At line 87 in file library.s
Comment: quit used once
read_character 000002A4

Symbol: read_character
   Definitions
      At line 326 in file library.s
   Uses
      At line 7 in file library.s
Comment: read_character used once
read_character_2 000002A8

Symbol: read_character_2
   Definitions
      At line 328 in file library.s
   Uses
      None
Comment: read_character_2 unused
read_character_break 000002C0

Symbol: read_character_break
   Definitions
      At line 343 in file library.s
   Uses
      None
Comment: read_character_break unused
setup_pins 000000AC

Symbol: setup_pins
   Definitions
      At line 73 in file library.s
   Uses
      At line 4 in file library.s
Comment: setup_pins used once
store_input 00000338

Symbol: store_input
   Definitions
      At line 394 in file library.s
   Uses
      At line 19 in file library.s
Comment: store_input used once
test 00000000

Symbol: test
   Definitions
      At line 21 in file library.s
   Uses
      None
Comment: test unused
to_mem 00000380




ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

Symbol: to_mem
   Definitions
      At line 427 in file library.s
   Uses
      At line 416 in file library.s
      At line 422 in file library.s

toggle_seven_seg 000001F0

Symbol: toggle_seven_seg
   Definitions
      At line 245 in file library.s
   Uses
      At line 6 in file library.s
Comment: toggle_seven_seg used once
tss_exit 00000214

Symbol: tss_exit
   Definitions
      At line 266 in file library.s
   Uses
      At line 259 in file library.s
Comment: tss_exit used once
tss_off 0000020C

Symbol: tss_off
   Definitions
      At line 261 in file library.s
   Uses
      At line 249 in file library.s
Comment: tss_off used once
tss_on 000001FC

Symbol: tss_on
   Definitions
      At line 251 in file library.s
   Uses
      None
Comment: tss_on unused
uart_init 00000050

Symbol: uart_init
   Definitions
      At line 45 in file library.s
   Uses
      At line 2 in file library.s
Comment: uart_init used once
validate_input 000000C4

Symbol: validate_input
   Definitions
      At line 83 in file library.s
   Uses
      At line 5 in file library.s
Comment: validate_input used once
vi_exit 00000114

Symbol: vi_exit
   Definitions



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols

      At line 123 in file library.s
   Uses
      At line 111 in file library.s
      At line 117 in file library.s

vi_invalid 00000110

Symbol: vi_invalid
   Definitions
      At line 119 in file library.s
   Uses
      At line 93 in file library.s
      At line 96 in file library.s
      At line 99 in file library.s

vi_valid_letter_upper 00000108

Symbol: vi_valid_letter_upper
   Definitions
      At line 113 in file library.s
   Uses
      At line 105 in file library.s
Comment: vi_valid_letter_upper used once
vi_valid_number 00000100

Symbol: vi_valid_number
   Definitions
      At line 107 in file library.s
   Uses
      At line 90 in file library.s
      At line 102 in file library.s

46 symbols
380 symbols in table
