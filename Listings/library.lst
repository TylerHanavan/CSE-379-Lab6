


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             library, CODE, READWRITE
    2 00000000                 EXPORT           uart_init
    3 00000000                 EXPORT           pin_connect_block_setup_for_uar
t0
    4 00000000                 EXPORT           setup_pins
    5 00000000                 EXPORT           validate_input
    6 00000000                 EXPORT           toggle_seven_seg
    7 00000000                 EXPORT           read_character
    8 00000000                 EXPORT           output_character
    9 00000000                 EXPORT           output_string
   10 00000000                 EXPORT           clear_display
   11 00000000                 EXPORT           change_display
   12 00000000         
   13 00000000                 EXPORT           change_display_digit
   14 00000000                 EXPORT           get_digit
   15 00000000         
   16 00000000                 EXPORT           from_ascii
   17 00000000         
   18 00000000 74 65 73 
              74 31 00 test    =                "test1",0
   19 00000006 00 00           ALIGN
   20 00000008         
   21 00000008         digits_SET
   22 00000008 00003780        DCD              0x00003780  ; 0 
   23 0000000C 00003000        DCD              0x00003000  ; 1  
   24 00000010 00009580        DCD              0x00009580  ; 2
   25 00000014 00008780        DCD              0x00008780  ; 3
   26 00000018 0000A300        DCD              0x0000A300  ; 4
   27 0000001C 0000A680        DCD              0x0000A680  ; 5
   28 00000020 0000B680        DCD              0x0000B680  ; 6
   29 00000024 00000380        DCD              0x00000380  ; 7
   30 00000028 0000B780        DCD              0x0000B780  ; 8
   31 0000002C 0000A380        DCD              0x0000A380  ; 9
   32 00000030 0000B380        DCD              0x0000B380  ; A
   33 00000034 0000B600        DCD              0x0000B600  ; B
   34 00000038 00003480        DCD              0x00003480  ; C
   35 0000003C 00009700        DCD              0x00009700  ; D
   36 00000040 0000B480        DCD              0x0000B480  ; E
   37 00000044 0000B080        DCD              0x0000B080  ; F 
   38 00000048                 ALIGN
   39 00000048         
   40 00000048         uart_init
   41 00000048 E92D4000        STMFD            SP!,{lr}    ;push link register
                                                             to stack
   42 0000004C E59F0308        LDR              r0, =0xE000C00C ;loads the memo
                                                            ry address 0xE000C0
                                                            0C into r0
   43 00000050 E3A01083        MOV              r1, #131    ;copies decimal 131
                                                             into r1
   44 00000054 E5801000        STR              r1, [r0]    ;stores r1 into the
                                                             memory address at 
                                                            r0
   45 00000058 E59F0300        LDR              r0, =0xE000C000 ;loads the memo
                                                            ry address 0xE000C0
                                                            00 into r0
   46 0000005C E3A01078        MOV              r1, #120    ;copies decimal 120
                                                             into r1
   47 00000060 E5801000        STR              r1, [r0]    ;stores r1 into the
                                                             memory address at 



ARM Macro Assembler    Page 2 


                                                            r0
   48 00000064 E59F02F8        LDR              r0, =0xE000C004 ;loads the memo
                                                            ry address 0xE000C0
                                                            04 into r0
   49 00000068 E3A01000        MOV              r1, #0      ;copies decimal 0 i
                                                            nto r1
   50 0000006C E5801000        STR              r1, [r0]    ;stores r1 into the
                                                             memory address at 
                                                            r0
   51 00000070 E59F02E4        LDR              r0, =0xE000C00C ;loads the memo
                                                            ry address 0xE000C0
                                                            0C into r0
   52 00000074 E3A01003        MOV              r1, #3      ;copies decimal 3 i
                                                            nto r1
   53 00000078 E5801000        STR              r1, [r0]    ;stores r1 into the
                                                             memory address at 
                                                            r0
   54 0000007C E8BD4000        LDMFD            sp!, {lr}   ;pop link register 
                                                            from stack
   55 00000080 E12FFF1E        BX               lr          ;move pc,lr
   56 00000084         
   57 00000084         
   58 00000084         pin_connect_block_setup_for_uart0
   59 00000084 E92D4003        STMFD            sp!, {r0, r1, lr} ;Push stack
   60 00000088 E59F02D8        LDR              r0, =0xE002C000 ; PINSEL0 load 
                                                            pinsel0 r0
   61 0000008C E5901000        LDR              r1, [r0]    ;Load pinsel0 conte
                                                            nts to r1
   62 00000090 E3811005        ORR              r1, r1, #5  ; Or with 5 dec.
   63 00000094 E3C1100A        BIC              r1, r1, #0xA 
                                                            ; Clear against 0xA
                                                            
   64 00000098 E5801000        STR              r1, [r0]    ; Store results to 
                                                            r0 in memory
   65 0000009C E8BD4003        LDMFD            sp!, {r0, r1, lr} ;Pop stack
   66 000000A0 E12FFF1E        BX               lr          ;Branch back
   67 000000A4         
   68 000000A4         setup_pins
   69 000000A4 E92D400E        STMFD            SP!,{lr, r1, r2, r3}
   70 000000A8         
   71 000000A8 E59F12BC        LDR              r1, =0xE0028008 ;IODIR for Seve
                                                            n-Seg
   72 000000AC E59F32BC        LDR              r3, =0xB784 ;Load 0xB784 (for b
                                                            it manipulation) to
                                                             r3
   73 000000B0 E5813000        STR              r3, [r1]    ;store results to r
                                                            1
   74 000000B4         
   75 000000B4 E8BD400E        LDMFD            sp!, {lr, r1, r2, r3}
   76 000000B8 E12FFF1E        BX               lr
   77 000000BC         
   78 000000BC         validate_input                       ;checks that the in
                                                            putted value (r0) i
                                                            s either hexadecima
                                                            l or 'q'
   79 000000BC E92D400E        STMFD            SP!, {lr, r1, r2, r3} ;returns 
                                                            output as boolean i
                                                            n (r4)
   80 000000C0         



ARM Macro Assembler    Page 3 


   81 000000C0 E3500071        CMP              r0, #0x71   ;'q'
   82 000000C4 0A0000A3        BEQ              quit
   83 000000C8         
   84 000000C8 E350000D        CMP              r0, #0xD
   85 000000CC 0A00000D        BEQ              vi_valid_number
   86 000000D0         
   87 000000D0 E3590000        CMP              r9, #0      ;not accepting inpu
                                                            t (bar 'q') when di
                                                            splay is off
   88 000000D4 0A000011        BEQ              vi_invalid
   89 000000D8         
   90 000000D8 E3500030        CMP              r0, #0x30   ;<0x30 invalid
   91 000000DC BA00000F        BLT              vi_invalid
   92 000000E0         
   93 000000E0 E3500066        CMP              r0, #0x66   ;>0x66 invalid
   94 000000E4 CA00000D        BGT              vi_invalid
   95 000000E8         
   96 000000E8 E3500039        CMP              r0, #0x39   ;<=0x39 valid numbe
                                                            r
   97 000000EC DA000005        BLE              vi_valid_number
   98 000000F0         
   99 000000F0 E3500061        CMP              r0, #0x61   ;>=0x61 valid upper
                                                            case letter
  100 000000F4 AA000007        BGE              vi_valid_letter_upper
  101 000000F8         
  102 000000F8 E3500046        CMP              r0, #0x46   ;>0x46 invalid
  103 000000FC CA000007        BGT              vi_invalid
  104 00000100         
  105 00000100 E3500041        CMP              r0, #0x41   ;>=0x41 valid upper
                                                            case letter
  106 00000104 AA000003        BGE              vi_valid_letter_upper
  107 00000108         
  108 00000108         vi_valid_number
  109 00000108         
  110 00000108 E3A04001        MOV              r4, #1      ;return 1 for r4
  111 0000010C         
  112 0000010C EA000004        B                vi_exit
  113 00000110         
  114 00000110         vi_valid_letter_lower
  115 00000110         
  116 00000110 E3A04001        MOV              r4, #1      ;return 1 for r4
  117 00000114         
  118 00000114 EA000002        B                vi_exit
  119 00000118         
  120 00000118         vi_valid_letter_upper
  121 00000118         
  122 00000118 E3A04001        MOV              r4, #1      ;return 1 for r4
  123 0000011C         
  124 0000011C EA000000        B                vi_exit
  125 00000120         
  126 00000120         vi_invalid
  127 00000120         
  128 00000120 E3A04000        MOV              r4, #0      ;return 0 for r4
  129 00000124         
  130 00000124         vi_exit
  131 00000124         
  132 00000124 E8BD400E        LDMFD            SP!, {lr, r1, r2, r3}
  133 00000128 E12FFF1E        BX               lr
  134 0000012C         



ARM Macro Assembler    Page 4 


  135 0000012C         get_digit                            ; returns (in r4) t
                                                            he hexadecimal numb
                                                            er's (globally at r
                                                            8) digit r0
  136 0000012C         ; last-most digit is 0, first-most digit is n where n is
                        number of steps needed to get to said digit
  137 0000012C         
  138 0000012C E92D402E        STMFD            SP!, {lr, r1, r2, r3, r5}
  139 00000130         
  140 00000130 E3A0100F        MOV              r1, #0xF
  141 00000134 E1A02008        MOV              r2, r8
  142 00000138 E3A03000        MOV              r3, #0
  143 0000013C         
  144 0000013C E3500000        CMP              r0, #0
  145 00000140 0A000005        BEQ              get_digit_0
  146 00000144         
  147 00000144 E3500001        CMP              r0, #1
  148 00000148 0A000009        BEQ              get_digit_1
  149 0000014C         
  150 0000014C E3500002        CMP              r0, #2
  151 00000150 0A00000E        BEQ              get_digit_2
  152 00000154         
  153 00000154 E3500003        CMP              r0, #3
  154 00000158 0A000013        BEQ              get_digit_3
  155 0000015C         
  156 0000015C         get_digit_0
  157 0000015C         
  158 0000015C E0022001        AND              r2, r2, r1
  159 00000160         
  160 00000160         get_digit_0_loop
  161 00000160         
  162 00000160 E3520000        CMP              r2, #0
  163 00000164 0A000018        BEQ              get_digit_end
  164 00000168         
  165 00000168 E2833001        ADD              r3, r3, #1
  166 0000016C E2422001        SUB              r2, r2, #1
  167 00000170         
  168 00000170 EAFFFFFA        B                get_digit_0_loop
  169 00000174         
  170 00000174         
  171 00000174         get_digit_1
  172 00000174         
  173 00000174 E1A01201        MOV              r1, r1, LSL #4
  174 00000178         
  175 00000178 E0022001        AND              r2, r2, r1
  176 0000017C         
  177 0000017C         get_digit_1_loop
  178 0000017C         
  179 0000017C E352000F        CMP              r2, #0xF
  180 00000180 DA000011        BLE              get_digit_end
  181 00000184         
  182 00000184 E2833001        ADD              r3, r3, #1
  183 00000188 E2422010        SUB              r2, r2, #0x10
  184 0000018C         
  185 0000018C EAFFFFF3        B                get_digit_0_loop
  186 00000190         
  187 00000190         get_digit_2
  188 00000190         
  189 00000190 E1A01401        MOV              r1, r1, LSL #8



ARM Macro Assembler    Page 5 


  190 00000194         
  191 00000194 E0022001        AND              r2, r2, r1
  192 00000198         
  193 00000198         get_digit_2_loop
  194 00000198         
  195 00000198 E35200FF        CMP              r2, #0xFF
  196 0000019C DA00000A        BLE              get_digit_end
  197 000001A0         
  198 000001A0 E2833001        ADD              r3, r3, #1
  199 000001A4 E2422C01        SUB              r2, r2, #0x100
  200 000001A8         
  201 000001A8 EAFFFFFA        B                get_digit_2_loop
  202 000001AC         
  203 000001AC         get_digit_3
  204 000001AC         
  205 000001AC E1A01601        MOV              r1, r1, LSL #12
  206 000001B0         
  207 000001B0 E0022001        AND              r2, r2, r1
  208 000001B4         
  209 000001B4         get_digit_3_loop
  210 000001B4         
  211 000001B4 E59F51B8        LDR              r5, =0xFFF
  212 000001B8         
  213 000001B8 E1520005        CMP              r2, r5
  214 000001BC DA000002        BLE              get_digit_end
  215 000001C0         
  216 000001C0 E2833001        ADD              r3, r3, #1
  217 000001C4 E2422A01        SUB              r2, r2, #0x1000
  218 000001C8         
  219 000001C8 EAFFFFF9        B                get_digit_3_loop
  220 000001CC         
  221 000001CC         get_digit_end
  222 000001CC         
  223 000001CC E1A04003        MOV              r4, r3
  224 000001D0         
  225 000001D0 E8BD402E        LDMFD            SP!, {lr, r1, r2, r3, r5}
  226 000001D4 E12FFF1E        BX               lr
  227 000001D8         
  228 000001D8         from_ascii                           ; converts (singe-d
                                                            igit) number at r0 
                                                            from ascii number t
                                                            o normal number, re
                                                            turning at r4
  229 000001D8 E92D400E        STMFD            SP!, {lr, r1, r2, r3}
  230 000001DC         
  231 000001DC E3500039        CMP              r0, #0x39
  232 000001E0 DA000003        BLE              fa_number
  233 000001E4         
  234 000001E4 E3500061        CMP              r0, #0x61
  235 000001E8 AA000003        BGE              fa_lower
  236 000001EC         
  237 000001EC E3500041        CMP              r0, #0x41
  238 000001F0 AA000000        BGE              fa_upper
  239 000001F4         
  240 000001F4         fa_number
  241 000001F4         
  242 000001F4 E2404030        SUB              r4, r0, #0x30
  243 000001F8         
  244 000001F8         fa_upper



ARM Macro Assembler    Page 6 


  245 000001F8         
  246 000001F8 E2404036        SUB              r4, r0, #54
  247 000001FC         
  248 000001FC         fa_lower
  249 000001FC         
  250 000001FC E2404056        SUB              r4, r0, #86
  251 00000200         
  252 00000200         fa_exit
  253 00000200         
  254 00000200 E8BD400E        LDMFD            SP!, {lr, r1, r2, r3}
  255 00000204 E12FFF1E        BX               lr
  256 00000208         
  257 00000208         toggle_seven_seg
  258 00000208 E92D4001        STMFD            SP!, {lr, r0}
  259 0000020C         
  260 0000020C E3590000        CMP              r9, #0      ;check if seven seg
                                                             is off
  261 00000210 1A000003        BNE              tss_off
  262 00000214         
  263 00000214         tss_on
  264 00000214         
  265 00000214 E3A09001        MOV              r9, #1      ;set the flag to #1
                                                             (r9) to say seven 
                                                            seg is on
  266 00000218         
  267 00000218 E1A00006        MOV              r0, r6
  268 0000021C         
  269 0000021C EBFFFFFE        BL               change_display ;change display
  270 00000220         
  271 00000220 EA000001        B                tss_exit
  272 00000224         
  273 00000224         tss_off
  274 00000224         
  275 00000224 E3A09000        MOV              r9, #0      ;set the flag to #0
                                                             (r9) to say seven 
                                                            seg is off
  276 00000228 EBFFFFFE        BL               clear_display ;clear (turn off)
                                                             display
  277 0000022C         
  278 0000022C         tss_exit
  279 0000022C         
  280 0000022C E8BD4001        LDMFD            SP!, {lr, r0}
  281 00000230 E12FFF1E        BX               lr
  282 00000234         
  283 00000234         change_display                       ;Displays hex value
                                                             passed in r0
  284 00000234 E92D400E        STMFD            SP!,{lr, r1, r2, r3}
  285 00000238         
  286 00000238 E3A09001        MOV              r9, #1
  287 0000023C E1A06000        MOV              r6, r0
  288 00000240         
  289 00000240 E59F1130        LDR              r1, =0xE0028000 ; Base address 
                                                            
  290 00000244 E59F3130        LDR              r3, =digits_SET
  291 00000248 E1A00100        MOV              r0, r0, LSL #2 ; Each stored va
                                                            lue is 32 bits 
  292 0000024C E7932000        LDR              r2, [r3, r0] ; Load IOSET patte
                                                            rn for digit in r0 
                                                            



ARM Macro Assembler    Page 7 


  293 00000250 E5812004        STR              r2, [r1, #4] ; Display (0x4 = o
                                                            ffset to IOSET) 
  294 00000254         
  295 00000254 E8BD400E        LDMFD            sp!, {lr, r1, r2, r3}
  296 00000258 E12FFF1E        BX               lr
  297 0000025C         
  298 0000025C         change_display_digit                 ;Displays hex value
                                                             passed in r0 at di
                                                            git r4
  299 0000025C E92D402E        STMFD            SP!,{lr, r1, r2, r3, r5}
  300 00000260         
  301 00000260 E3A09001        MOV              r9, #1
  302 00000264 E1A06000        MOV              r6, r0      ; Save our r0 at r6
                                                            
  303 00000268         
  304 00000268 E3A05001        MOV              r5, #1      ; Initial 1 for sel
                                                            ecting which pin to
                                                             HIGH
  305 0000026C         
  306 0000026C E2844002        ADD              r4, #0x2    ; DIGIT SEL IS OFFS
                                                            ET BY 2. BEGINS AT 
                                                            PIN 2. r4 + 2 is pi
                                                            n that gets HIGH'd
  307 00000270         
  308 00000270 E1A05415        MOV              r5, r5, LSL r4 ; Shift initial 
                                                            1 bit by r4
  309 00000274         
  310 00000274 E1E05005        MVN              r5, r5      ; High all bits bes
                                                            ides r4 (DIGIT SEL 
                                                            IS OFFSET BY 2. BEG
                                                            INS AT PIN 2. 0 & 1
                                                             RESERVED)
  311 00000278         ;ADD r5, r5, #1
  312 00000278         
  313 00000278 E205503C        AND              r5, r5, #0x3C ; Clear all bits 
                                                            (AND) besides 6 bit
                                                            s in 0x3C. Will be 
                                                            used in later OR
  314 0000027C         
  315 0000027C E59F10F4        LDR              r1, =0xE0028000 ; Base address 
                                                            for 7seg
  316 00000280 E59F30F4        LDR              r3, =digits_SET
  317 00000284 E1A00100        MOV              r0, r0, LSL #2 ; Each stored va
                                                            lue is 32 bits 
  318 00000288 E0833000        ADD              r3, r0
  319 0000028C E5932000        LDR              r2, [r3]    ; Load IOSET patter
                                                            n for digit in r0 
  320 00000290 E1822005        ORR              r2, r2, r5  ; HIGH bits not bei
                                                            ng used (HIGH-OFF T
                                                            O CHOOSE DIGIT)
  321 00000294 E5812004        STR              r2, [r1, #4] ; Display (0x4 = o
                                                            ffset to IOSET) 
  322 00000298         
  323 00000298 E8BD402E        LDMFD            sp!, {lr, r1, r2, r3, r5}
  324 0000029C E12FFF1E        BX               lr
  325 000002A0         
  326 000002A0         clear_display
  327 000002A0 E92D4006        STMFD            SP!,{lr, r1, r2}
  328 000002A4         



ARM Macro Assembler    Page 8 


  329 000002A4 E3A09000        MOV              r9, #0
  330 000002A8         
  331 000002A8 E59F10D0        LDR              r1, =0xE002800C 
                                                            ;Load P0xCLR to r1
  332 000002AC E59F20BC        LDR              r2, =0xB784 ;Load number (to r2
                                                            ) for bits of seven
                                                            -segment display
  333 000002B0 E5812000        STR              r2, [r1]    ;Store number in P0
                                                            xClr at r1
  334 000002B4         
  335 000002B4 E8BD4006        LDMFD            sp!, {lr, r1, r2}
  336 000002B8 E12FFF1E        BX               lr
  337 000002BC         
  338 000002BC         read_character                       ;Begin Receive Char
                                                            acter block
  339 000002BC E92D4038        STMFD            SP!,{lr, r3, r4, r5}
  340 000002C0         read_character_2
  341 000002C0 E59F30BC        LDR              r3, =0xE000C014 ;loads the addr
                                                            ess of uart0 into r
                                                            egister r3 
  342 000002C4         
  343 000002C4 E5D34000        LDRB             r4, [r3]    ;loads the bytes at
                                                             address r3 into r4
                                                             (RXFE - RDR)
  344 000002C8         
  345 000002C8 E3A05001        MOV              r5, #1      ;immediate value 1 
                                                            is copied into r5
  346 000002CC E0045005        AND              r5, r4, r5  ;logically AND r4 a
                                                            nd r5 to compare th
                                                            e LSB(RDR) of r4
  347 000002D0         
  348 000002D0 E3550001        CMP              r5, #1      ;if the value of r5
                                                             is one, we are rea
                                                            dy to receive data
  349 000002D4 1AFFFFF9        BNE              read_character_2 ;else redo the
                                                             process
  350 000002D8         
  351 000002D8         ; Receiving
  352 000002D8         
  353 000002D8 E59F3080        LDR              r3, =0xE000C000 ;loads the addr
                                                            ess of the receive 
                                                            buffer register int
                                                            o r5
  354 000002DC E5930000        LDR              r0, [r3]    ;hex value at r3 is
                                                             loaded into r0
  355 000002E0         read_character_break
  356 000002E0 E8BD4038        LDMFD            sp!, {lr, r3, r4, r5}
  357 000002E4 E12FFF1E        BX               lr
  358 000002E8         
  359 000002E8         output_character                     ;Begin Transmit Cha
                                                            racter block
  360 000002E8 E92D4068        STMFD            SP!,{lr, r3, r6, r5}
  361 000002EC         output_character_2
  362 000002EC E59F3090        LDR              r3, =0xE000C014 ;loads address 
                                                            of uart0 into regis
                                                            ter r3
  363 000002F0         
  364 000002F0 E5D36000        LDRB             r6, [r3]    ;loads bytes at add
                                                            ress r3 into r6 (RX



ARM Macro Assembler    Page 9 


                                                            FE - RDR)
  365 000002F4         
  366 000002F4 E3A05020        MOV              r5, #32     ;immediate value 32
                                                             (00010000) copied 
                                                            into r5  
  367 000002F8 E0065005        AND              r5, r6, r5  ;logically AND r6 a
                                                            nd r5 to compare th
                                                            e 5th bit(THRE) of 
                                                            r6
  368 000002FC         
  369 000002FC E3550020        CMP              r5, #32     ;if the fifth bit i
                                                            s 1, then we are re
                                                            ady to transmit
  370 00000300 1AFFFFF9        BNE              output_character_2 ;else we red
                                                            o the process
  371 00000304         
  372 00000304         ; Transmitting
  373 00000304         
  374 00000304 E59F5054        LDR              r5, =0xE000C000 ;loads the addr
                                                            ess of the transmit
                                                             holding register (
                                                            same as receive buf
                                                            fer)
  375 00000308         
  376 00000308 E5850000        STR              r0, [r5]    ;stores the value o
                                                            f r0 into the addre
                                                            ss at r5
  377 0000030C E8BD4068        LDMFD            sp!, {lr, r3, r6, r5}
  378 00000310 E12FFF1E        BX               lr
  379 00000314         
  380 00000314         output_string
  381 00000314 E92D4003        STMFD            SP!,{lr, r0, r1}
  382 00000318         
  383 00000318         output_string_2
  384 00000318 E4D40001        LDRB             r0, [r4], #1 ;Load =prompt cont
                                                            ents from memory (r
                                                            4) to r0, one byte 
                                                            at a time. Then inc
                                                            rements memory addr
                                                            ess, r4, by 1.
  385 0000031C EBFFFFFE        BL               output_character ;Branch and li
                                                            nk to output_charac
                                                            ter
  386 00000320         
  387 00000320 E3500000        CMP              r0,#0       ;compares r0 to nul
                                                            l terminator
  388 00000324 1AFFFFFB        BNE              output_string_2 ;if equal we co
                                                            ntinue on with prog
                                                            ram
  389 00000328         
  390 00000328 EB000001        BL               new_line
  391 0000032C         
  392 0000032C E8BD4003        LDMFD            sp!, {lr, r0, r1}
  393 00000330 E12FFF1E        BX               lr
  394 00000334         
  395 00000334         new_line
  396 00000334 E92D4400        STMFD            SP!,{lr, r10}
  397 00000338 E1A0A000        MOV              r10, r0     ;saves contents of 
                                                            r0 into r10 before 



ARM Macro Assembler    Page 10 


                                                            using it
  398 0000033C E3A0000A        MOV              r0, #0xA    ;new line character
                                                             copied into r0
  399 00000340 EBFFFFFE        BL               output_character ;branch and li
                                                            nk to output charac
                                                            ter
  400 00000344 E3A0000D        MOV              r0, #0xD    ;carriage return co
                                                            pied into r0
  401 00000348 EBFFFFFE        BL               output_character ;branch and li
                                                            nk to output charac
                                                            ter
  402 0000034C E1A0000A        MOV              r0, r10     ;takes saved conten
                                                            t from r10 and copi
                                                            es into r0
  403 00000350 E8BD4400        LDMFD            sp!, {lr, r10}
  404 00000354 E12FFF1E        BX               lr
  405 00000358         
  406 00000358         quit
  407 00000358 E3A07005        MOV              r7, #5
  408 0000035C                 END
              E000C00C 
              E000C000 
              E000C004 
              E002C000 
              E0028008 
              0000B784 
              00000FFF 
              E0028000 
              00000000 
              E002800C 
              E000C014 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\library.d -o.\objects\library.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\A
RM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --pre
define="__UVISION_VERSION SETA 524" --list=.\listings\library.lst library.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

change_display 00000234

Symbol: change_display
   Definitions
      At line 283 in file library.s
   Uses
      At line 11 in file library.s
      At line 269 in file library.s

change_display_digit 0000025C

Symbol: change_display_digit
   Definitions
      At line 298 in file library.s
   Uses
      At line 13 in file library.s
Comment: change_display_digit used once
clear_display 000002A0

Symbol: clear_display
   Definitions
      At line 326 in file library.s
   Uses
      At line 10 in file library.s
      At line 276 in file library.s

digits_SET 00000008

Symbol: digits_SET
   Definitions
      At line 21 in file library.s
   Uses
      At line 290 in file library.s
      At line 316 in file library.s

fa_exit 00000200

Symbol: fa_exit
   Definitions
      At line 252 in file library.s
   Uses
      None
Comment: fa_exit unused
fa_lower 000001FC

Symbol: fa_lower
   Definitions
      At line 248 in file library.s
   Uses
      At line 235 in file library.s
Comment: fa_lower used once
fa_number 000001F4

Symbol: fa_number
   Definitions
      At line 240 in file library.s
   Uses
      At line 232 in file library.s
Comment: fa_number used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

fa_upper 000001F8

Symbol: fa_upper
   Definitions
      At line 244 in file library.s
   Uses
      At line 238 in file library.s
Comment: fa_upper used once
from_ascii 000001D8

Symbol: from_ascii
   Definitions
      At line 228 in file library.s
   Uses
      At line 16 in file library.s
Comment: from_ascii used once
get_digit 0000012C

Symbol: get_digit
   Definitions
      At line 135 in file library.s
   Uses
      At line 14 in file library.s
Comment: get_digit used once
get_digit_0 0000015C

Symbol: get_digit_0
   Definitions
      At line 156 in file library.s
   Uses
      At line 145 in file library.s
Comment: get_digit_0 used once
get_digit_0_loop 00000160

Symbol: get_digit_0_loop
   Definitions
      At line 160 in file library.s
   Uses
      At line 168 in file library.s
      At line 185 in file library.s

get_digit_1 00000174

Symbol: get_digit_1
   Definitions
      At line 171 in file library.s
   Uses
      At line 148 in file library.s
Comment: get_digit_1 used once
get_digit_1_loop 0000017C

Symbol: get_digit_1_loop
   Definitions
      At line 177 in file library.s
   Uses
      None
Comment: get_digit_1_loop unused
get_digit_2 00000190




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Symbol: get_digit_2
   Definitions
      At line 187 in file library.s
   Uses
      At line 151 in file library.s
Comment: get_digit_2 used once
get_digit_2_loop 00000198

Symbol: get_digit_2_loop
   Definitions
      At line 193 in file library.s
   Uses
      At line 201 in file library.s
Comment: get_digit_2_loop used once
get_digit_3 000001AC

Symbol: get_digit_3
   Definitions
      At line 203 in file library.s
   Uses
      At line 154 in file library.s
Comment: get_digit_3 used once
get_digit_3_loop 000001B4

Symbol: get_digit_3_loop
   Definitions
      At line 209 in file library.s
   Uses
      At line 219 in file library.s
Comment: get_digit_3_loop used once
get_digit_end 000001CC

Symbol: get_digit_end
   Definitions
      At line 221 in file library.s
   Uses
      At line 163 in file library.s
      At line 180 in file library.s
      At line 196 in file library.s
      At line 214 in file library.s

library 00000000

Symbol: library
   Definitions
      At line 1 in file library.s
   Uses
      None
Comment: library unused
new_line 00000334

Symbol: new_line
   Definitions
      At line 395 in file library.s
   Uses
      At line 390 in file library.s
Comment: new_line used once
output_character 000002E8




ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

Symbol: output_character
   Definitions
      At line 359 in file library.s
   Uses
      At line 8 in file library.s
      At line 385 in file library.s
      At line 399 in file library.s
      At line 401 in file library.s

output_character_2 000002EC

Symbol: output_character_2
   Definitions
      At line 361 in file library.s
   Uses
      At line 370 in file library.s
Comment: output_character_2 used once
output_string 00000314

Symbol: output_string
   Definitions
      At line 380 in file library.s
   Uses
      At line 9 in file library.s
Comment: output_string used once
output_string_2 00000318

Symbol: output_string_2
   Definitions
      At line 383 in file library.s
   Uses
      At line 388 in file library.s
Comment: output_string_2 used once
pin_connect_block_setup_for_uart0 00000084

Symbol: pin_connect_block_setup_for_uart0
   Definitions
      At line 58 in file library.s
   Uses
      At line 3 in file library.s
Comment: pin_connect_block_setup_for_uart0 used once
quit 00000358

Symbol: quit
   Definitions
      At line 406 in file library.s
   Uses
      At line 82 in file library.s
Comment: quit used once
read_character 000002BC

Symbol: read_character
   Definitions
      At line 338 in file library.s
   Uses
      At line 7 in file library.s
Comment: read_character used once
read_character_2 000002C0




ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

Symbol: read_character_2
   Definitions
      At line 340 in file library.s
   Uses
      At line 349 in file library.s
Comment: read_character_2 used once
read_character_break 000002E0

Symbol: read_character_break
   Definitions
      At line 355 in file library.s
   Uses
      None
Comment: read_character_break unused
setup_pins 000000A4

Symbol: setup_pins
   Definitions
      At line 68 in file library.s
   Uses
      At line 4 in file library.s
Comment: setup_pins used once
test 00000000

Symbol: test
   Definitions
      At line 18 in file library.s
   Uses
      None
Comment: test unused
toggle_seven_seg 00000208

Symbol: toggle_seven_seg
   Definitions
      At line 257 in file library.s
   Uses
      At line 6 in file library.s
Comment: toggle_seven_seg used once
tss_exit 0000022C

Symbol: tss_exit
   Definitions
      At line 278 in file library.s
   Uses
      At line 271 in file library.s
Comment: tss_exit used once
tss_off 00000224

Symbol: tss_off
   Definitions
      At line 273 in file library.s
   Uses
      At line 261 in file library.s
Comment: tss_off used once
tss_on 00000214

Symbol: tss_on
   Definitions
      At line 263 in file library.s



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

   Uses
      None
Comment: tss_on unused
uart_init 00000048

Symbol: uart_init
   Definitions
      At line 40 in file library.s
   Uses
      At line 2 in file library.s
Comment: uart_init used once
validate_input 000000BC

Symbol: validate_input
   Definitions
      At line 78 in file library.s
   Uses
      At line 5 in file library.s
Comment: validate_input used once
vi_exit 00000124

Symbol: vi_exit
   Definitions
      At line 130 in file library.s
   Uses
      At line 112 in file library.s
      At line 118 in file library.s
      At line 124 in file library.s

vi_invalid 00000120

Symbol: vi_invalid
   Definitions
      At line 126 in file library.s
   Uses
      At line 88 in file library.s
      At line 91 in file library.s
      At line 94 in file library.s
      At line 103 in file library.s

vi_valid_letter_lower 00000110

Symbol: vi_valid_letter_lower
   Definitions
      At line 114 in file library.s
   Uses
      None
Comment: vi_valid_letter_lower unused
vi_valid_letter_upper 00000118

Symbol: vi_valid_letter_upper
   Definitions
      At line 120 in file library.s
   Uses
      At line 100 in file library.s
      At line 106 in file library.s

vi_valid_number 00000108




ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols

Symbol: vi_valid_number
   Definitions
      At line 108 in file library.s
   Uses
      At line 85 in file library.s
      At line 97 in file library.s

43 symbols
377 symbols in table
