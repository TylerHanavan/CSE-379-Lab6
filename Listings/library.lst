


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             library, CODE, READWRITE
    2 00000000                 EXPORT           uart_init
    3 00000000                 EXPORT           pin_connect_block_setup_for_uar
t0
    4 00000000                 EXPORT           setup_pins
    5 00000000                 EXPORT           validate_input
    6 00000000                 EXPORT           toggle_seven_seg
    7 00000000                 EXPORT           read_character
    8 00000000                 EXPORT           output_character
    9 00000000                 EXPORT           output_string
   10 00000000                 EXPORT           clear_display
   11 00000000                 EXPORT           change_display
   12 00000000         
   13 00000000 74 65 73 
              74 31 00 test    =                "test1",0
   14 00000006 00 00           ALIGN
   15 00000008         
   16 00000008         digits_SET
   17 00000008 00003780        DCD              0x00003780  ; 0 
   18 0000000C 00003000        DCD              0x00003000  ; 1  
   19 00000010 00009580        DCD              0x00009580  ; 2
   20 00000014 00008780        DCD              0x00008780  ; 3
   21 00000018 0000A300        DCD              0x0000A300  ; 4
   22 0000001C 0000A680        DCD              0x0000A680  ; 5
   23 00000020 0000B680        DCD              0x0000B680  ; 6
   24 00000024 00000380        DCD              0x00000380  ; 7
   25 00000028 0000B780        DCD              0x0000B780  ; 8
   26 0000002C 0000A380        DCD              0x0000A380  ; 9
   27 00000030 0000B380        DCD              0x0000B380  ; A
   28 00000034 0000B600        DCD              0x0000B600  ; B
   29 00000038 00003480        DCD              0x00003480  ; C
   30 0000003C 00009700        DCD              0x00009700  ; D
   31 00000040 0000B480        DCD              0x0000B480  ; E
   32 00000044 0000B080        DCD              0x0000B080  ; F 
   33 00000048                 ALIGN
   34 00000048         
   35 00000048         uart_init
   36 00000048 E92D4000        STMFD            SP!,{lr}    ;push link register
                                                             to stack
   37 0000004C E59F01E0        LDR              r0, =0xE000C00C ;loads the memo
                                                            ry address 0xE000C0
                                                            0C into r0
   38 00000050 E3A01083        MOV              r1, #131    ;copies decimal 131
                                                             into r1
   39 00000054 E5801000        STR              r1, [r0]    ;stores r1 into the
                                                             memory address at 
                                                            r0
   40 00000058 E59F01D8        LDR              r0, =0xE000C000 ;loads the memo
                                                            ry address 0xE000C0
                                                            00 into r0
   41 0000005C E3A01078        MOV              r1, #120    ;copies decimal 120
                                                             into r1
   42 00000060 E5801000        STR              r1, [r0]    ;stores r1 into the
                                                             memory address at 
                                                            r0
   43 00000064 E59F01D0        LDR              r0, =0xE000C004 ;loads the memo
                                                            ry address 0xE000C0
                                                            04 into r0
   44 00000068 E3A01000        MOV              r1, #0      ;copies decimal 0 i



ARM Macro Assembler    Page 2 


                                                            nto r1
   45 0000006C E5801000        STR              r1, [r0]    ;stores r1 into the
                                                             memory address at 
                                                            r0
   46 00000070 E59F01BC        LDR              r0, =0xE000C00C ;loads the memo
                                                            ry address 0xE000C0
                                                            0C into r0
   47 00000074 E3A01003        MOV              r1, #3      ;copies decimal 3 i
                                                            nto r1
   48 00000078 E5801000        STR              r1, [r0]    ;stores r1 into the
                                                             memory address at 
                                                            r0
   49 0000007C E8BD4000        LDMFD            sp!, {lr}   ;pop link register 
                                                            from stack
   50 00000080 E12FFF1E        BX               lr          ;move pc,lr
   51 00000084         
   52 00000084         
   53 00000084         pin_connect_block_setup_for_uart0
   54 00000084 E92D4003        STMFD            sp!, {r0, r1, lr} ;Push stack
   55 00000088 E59F01B0        LDR              r0, =0xE002C000 ; PINSEL0 load 
                                                            pinsel0 r0
   56 0000008C E5901000        LDR              r1, [r0]    ;Load pinsel0 conte
                                                            nts to r1
   57 00000090 E3811005        ORR              r1, r1, #5  ; Or with 5 dec.
   58 00000094 E3C1100A        BIC              r1, r1, #0xA 
                                                            ; Clear against 0xA
                                                            
   59 00000098 E5801000        STR              r1, [r0]    ; Store results to 
                                                            r0 in memory
   60 0000009C E8BD4003        LDMFD            sp!, {r0, r1, lr} ;Pop stack
   61 000000A0 E12FFF1E        BX               lr          ;Branch back
   62 000000A4         
   63 000000A4         setup_pins
   64 000000A4 E92D400E        STMFD            SP!,{lr, r1, r2, r3}
   65 000000A8         
   66 000000A8 E59F1194        LDR              r1, =0xE0028008 ;IODIR for Seve
                                                            n-Seg
   67 000000AC E59F3194        LDR              r3, =0xB784 ;Load 0xB784 (for b
                                                            it manipulation) to
                                                             r3
   68 000000B0 E5813000        STR              r3, [r1]    ;store results to r
                                                            1
   69 000000B4         
   70 000000B4 E8BD400E        LDMFD            sp!, {lr, r1, r2, r3}
   71 000000B8 E12FFF1E        BX               lr
   72 000000BC         
   73 000000BC         validate_input                       ;checks that the in
                                                            putted value (r0) i
                                                            s either hexadecima
                                                            l or 'q'
   74 000000BC E92D4000        STMFD            SP!, {lr}   ;returns output as 
                                                            boolean in (r4)
   75 000000C0         
   76 000000C0 E3500071        CMP              r0, #0x71   ;'q'
   77 000000C4 0A000059        BEQ              quit
   78 000000C8         
   79 000000C8         ;CMP r9, #1 
   80 000000C8         ;BNE vi_exit_false   ;Not accepting input at this time 
   81 000000C8         



ARM Macro Assembler    Page 3 


   82 000000C8 E3500030        CMP              r0, #0x30   ;Less than 0x30, in
                                                            valid input
   83 000000CC BA000011        BLT              vi_exit_false
   84 000000D0         
   85 000000D0 E3500046        CMP              r0, #0x46   ;Greater than 0x46,
                                                             invalid input
   86 000000D4 CA00000F        BGT              vi_exit_false
   87 000000D8         
   88 000000D8 E3500039        CMP              r0, #0x39   ;Less than equal 0x
                                                            39, valid input
   89 000000DC DA000008        BLE              vi_exit_true_num
   90 000000E0         
   91 000000E0 E3500041        CMP              r0, #0x41   ;Greater than equal
                                                             0x41, valid input
   92 000000E4 AA000000        BGE              vi_exit_true_let
   93 000000E8         
   94 000000E8 EA00000A        B                vi_exit_false
   95 000000EC         
   96 000000EC         vi_exit_true_let                     ;change display and
                                                             return 0x1 in r4
   97 000000EC         
   98 000000EC E3A04001        MOV              r4, #0x1
   99 000000F0         
  100 000000F0 E2400041        SUB              r0, r0, #0x41
  101 000000F4 E280000A        ADD              r0, r0, #10
  102 000000F8         
  103 000000F8 EBFFFFFE        BL               clear_display
  104 000000FC         
  105 000000FC EBFFFFFE        BL               change_display
  106 00000100         ;LDR r4, =test
  107 00000100         ;BL output_string
  108 00000100         
  109 00000100 EA000005        B                vi_exit
  110 00000104         
  111 00000104         vi_exit_true_num                     ;change display and
                                                             return 0x1 in r4
  112 00000104         
  113 00000104 E3A04001        MOV              r4, #0x1
  114 00000108         
  115 00000108 E2400030        SUB              r0, r0, #0x30
  116 0000010C         
  117 0000010C EBFFFFFE        BL               clear_display
  118 00000110         
  119 00000110 EBFFFFFE        BL               change_display
  120 00000114         ;LDR r4, =test
  121 00000114         ;BL output_string
  122 00000114         
  123 00000114 EA000000        B                vi_exit
  124 00000118         
  125 00000118         vi_exit_false                        ;don't change displ
                                                            ay. return 0x0 in r
                                                            4
  126 00000118         
  127 00000118 E3A04000        MOV              r4, #0x0
  128 0000011C         
  129 0000011C         vi_exit
  130 0000011C         
  131 0000011C E8BD4000        LDMFD            SP!, {lr}
  132 00000120 E12FFF1E        BX               lr



ARM Macro Assembler    Page 4 


  133 00000124         
  134 00000124         toggle_seven_seg
  135 00000124 E92D4001        STMFD            SP!, {lr, r0}
  136 00000128         
  137 00000128 E3590000        CMP              r9, #0      ;check if seven seg
                                                             is off
  138 0000012C 1A000003        BNE              tss_off
  139 00000130         
  140 00000130         tss_on
  141 00000130         
  142 00000130 E3A09001        MOV              r9, #1      ;set the flag to #1
                                                             (r9) to say seven 
                                                            seg is on
  143 00000134         
  144 00000134 E1A00006        MOV              r0, r6
  145 00000138         
  146 00000138 EBFFFFFE        BL               change_display ;change display
  147 0000013C         
  148 0000013C EA000001        B                tss_exit
  149 00000140         
  150 00000140         tss_off
  151 00000140         
  152 00000140 E3A09000        MOV              r9, #0      ;set the flag to #0
                                                             (r9) to say seven 
                                                            seg is off
  153 00000144 EBFFFFFE        BL               clear_display ;clear (turn off)
                                                             display
  154 00000148         
  155 00000148         tss_exit
  156 00000148         
  157 00000148 E8BD4001        LDMFD            SP!, {lr, r0}
  158 0000014C E12FFF1E        BX               lr
  159 00000150         
  160 00000150         change_display                       ;Displays hex value
                                                             passed in r0
  161 00000150 E92D400E        STMFD            SP!,{lr, r1, r2, r3}
  162 00000154         
  163 00000154 E3A09001        MOV              r9, #1
  164 00000158 E1A06000        MOV              r6, r0
  165 0000015C         
  166 0000015C E59F10E8        LDR              r1, =0xE0028000 ; Base address 
                                                            
  167 00000160 E59F30E8        LDR              r3, =digits_SET
  168 00000164 E1A00100        MOV              r0, r0, LSL #2 ; Each stored va
                                                            lue is 32 bits 
  169 00000168 E7932000        LDR              r2, [r3, r0] ; Load IOSET patte
                                                            rn for digit in r0 
                                                            
  170 0000016C E5812004        STR              r2, [r1, #4] ; Display (0x4 = o
                                                            ffset to IOSET) 
  171 00000170         
  172 00000170 E8BD400E        LDMFD            sp!, {lr, r1, r2, r3}
  173 00000174 E12FFF1E        BX               lr
  174 00000178         
  175 00000178         clear_display
  176 00000178 E92D4006        STMFD            SP!,{lr, r1, r2}
  177 0000017C         
  178 0000017C E3A09000        MOV              r9, #0
  179 00000180         



ARM Macro Assembler    Page 5 


  180 00000180 E59F10CC        LDR              r1, =0xE002800C 
                                                            ;Load P0xCLR to r1
  181 00000184 E59F20BC        LDR              r2, =0xB784 ;Load number (to r2
                                                            ) for bits of seven
                                                            -segment display
  182 00000188 E5812000        STR              r2, [r1]    ;Store number in P0
                                                            xClr at r1
  183 0000018C         
  184 0000018C E8BD4006        LDMFD            sp!, {lr, r1, r2}
  185 00000190 E12FFF1E        BX               lr
  186 00000194         
  187 00000194         read_character                       ;Begin Receive Char
                                                            acter block
  188 00000194 E92D4038        STMFD            SP!,{lr, r3, r4, r5}
  189 00000198         read_character_2
  190 00000198 E59F30B8        LDR              r3, =0xE000C014 ;loads the addr
                                                            ess of uart0 into r
                                                            egister r3 
  191 0000019C         
  192 0000019C E5D34000        LDRB             r4, [r3]    ;loads the bytes at
                                                             address r3 into r4
                                                             (RXFE - RDR)
  193 000001A0         
  194 000001A0 E3A05001        MOV              r5, #1      ;immediate value 1 
                                                            is copied into r5
  195 000001A4 E0045005        AND              r5, r4, r5  ;logically AND r4 a
                                                            nd r5 to compare th
                                                            e LSB(RDR) of r4
  196 000001A8         
  197 000001A8 E3550001        CMP              r5, #1      ;if the value of r5
                                                             is one, we are rea
                                                            dy to receive data
  198 000001AC 1AFFFFF9        BNE              read_character_2 ;else redo the
                                                             process
  199 000001B0         
  200 000001B0         ; Receiving
  201 000001B0         
  202 000001B0 E59F3080        LDR              r3, =0xE000C000 ;loads the addr
                                                            ess of the receive 
                                                            buffer register int
                                                            o r5
  203 000001B4 E5930000        LDR              r0, [r3]    ;hex value at r3 is
                                                             loaded into r8
  204 000001B8         read_character_break
  205 000001B8 E8BD4038        LDMFD            sp!, {lr, r3, r4, r5}
  206 000001BC E12FFF1E        BX               lr
  207 000001C0         
  208 000001C0         output_character                     ;Begin Transmit Cha
                                                            racter block
  209 000001C0 E92D4068        STMFD            SP!,{lr, r3, r6, r5}
  210 000001C4         output_character_2
  211 000001C4 E59F308C        LDR              r3, =0xE000C014 ;loads address 
                                                            of uart0 into regis
                                                            ter r3
  212 000001C8         
  213 000001C8 E5D36000        LDRB             r6, [r3]    ;loads bytes at add
                                                            ress r3 into r6 (RX
                                                            FE - RDR)
  214 000001CC         



ARM Macro Assembler    Page 6 


  215 000001CC E3A05020        MOV              r5, #32     ;immediate value 32
                                                             (00010000) copied 
                                                            into r5  
  216 000001D0 E0065005        AND              r5, r6, r5  ;logically AND r6 a
                                                            nd r5 to compare th
                                                            e 5th bit(THRE) of 
                                                            r6
  217 000001D4         
  218 000001D4 E3550020        CMP              r5, #32     ;if the fifth bit i
                                                            s 1, then we are re
                                                            ady to transmit
  219 000001D8 1AFFFFF9        BNE              output_character_2 ;else we red
                                                            o the process
  220 000001DC         
  221 000001DC         ; Transmitting
  222 000001DC         
  223 000001DC E59F5054        LDR              r5, =0xE000C000 ;loads the addr
                                                            ess of the transmit
                                                             holding register (
                                                            same as receive buf
                                                            fer)
  224 000001E0         
  225 000001E0 E5850000        STR              r0, [r5]    ;stores the value o
                                                            f r0 into the addre
                                                            ss at r5
  226 000001E4 E8BD4068        LDMFD            sp!, {lr, r3, r6, r5}
  227 000001E8 E12FFF1E        BX               lr
  228 000001EC         
  229 000001EC         output_string
  230 000001EC E92D4003        STMFD            SP!,{lr, r0, r1}
  231 000001F0         
  232 000001F0         output_string_2
  233 000001F0 E4D40001        LDRB             r0, [r4], #1 ;Load =prompt cont
                                                            ents from memory (r
                                                            4) to r0, one byte 
                                                            at a time. Then inc
                                                            rements memory addr
                                                            ess, r4, by 1.
  234 000001F4 EBFFFFFE        BL               output_character ;Branch and li
                                                            nk to output_charac
                                                            ter
  235 000001F8         
  236 000001F8 E3500000        CMP              r0,#0       ;compares r0 to nul
                                                            l terminator
  237 000001FC 1AFFFFFB        BNE              output_string_2 ;if equal we co
                                                            ntinue on with prog
                                                            ram
  238 00000200         
  239 00000200 EB000001        BL               new_line
  240 00000204         
  241 00000204 E8BD4003        LDMFD            sp!, {lr, r0, r1}
  242 00000208 E12FFF1E        BX               lr
  243 0000020C         
  244 0000020C         new_line
  245 0000020C E92D4400        STMFD            SP!,{lr, r10}
  246 00000210 E1A0A000        MOV              r10, r0     ;saves contents of 
                                                            r0 into r10 before 
                                                            using it
  247 00000214 E3A0000A        MOV              r0, #0xA    ;new line character



ARM Macro Assembler    Page 7 


                                                             copied into r0
  248 00000218 EBFFFFFE        BL               output_character ;branch and li
                                                            nk to output charac
                                                            ter
  249 0000021C E3A0000D        MOV              r0, #0xD    ;carriage return co
                                                            pied into r0
  250 00000220 EBFFFFFE        BL               output_character ;branch and li
                                                            nk to output charac
                                                            ter
  251 00000224 E1A0000A        MOV              r0, r10     ;takes saved conten
                                                            t from r10 and copi
                                                            es into r0
  252 00000228         ;CMP r8, #0xD    ;checks if r8 has  carriage return and 
                       jumps to clear it
  253 00000228         ;BEQ clear_read_character
  254 00000228 E8BD4400        LDMFD            sp!, {lr, r10}
  255 0000022C E12FFF1E        BX               lr
  256 00000230         
  257 00000230         quit
  258 00000230 E3A07001        MOV              r7, #1
  259 00000234                 END
              E000C00C 
              E000C000 
              E000C004 
              E002C000 
              E0028008 
              0000B784 
              E0028000 
              00000000 
              E002800C 
              E000C014 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\library.d -o.\objects\library.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\A
RM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --pre
define="__UVISION_VERSION SETA 524" --list=.\listings\library.lst library.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

change_display 00000150

Symbol: change_display
   Definitions
      At line 160 in file library.s
   Uses
      At line 11 in file library.s
      At line 105 in file library.s
      At line 119 in file library.s
      At line 146 in file library.s

clear_display 00000178

Symbol: clear_display
   Definitions
      At line 175 in file library.s
   Uses
      At line 10 in file library.s
      At line 103 in file library.s
      At line 117 in file library.s
      At line 153 in file library.s

digits_SET 00000008

Symbol: digits_SET
   Definitions
      At line 16 in file library.s
   Uses
      At line 167 in file library.s
Comment: digits_SET used once
library 00000000

Symbol: library
   Definitions
      At line 1 in file library.s
   Uses
      None
Comment: library unused
new_line 0000020C

Symbol: new_line
   Definitions
      At line 244 in file library.s
   Uses
      At line 239 in file library.s
Comment: new_line used once
output_character 000001C0

Symbol: output_character
   Definitions
      At line 208 in file library.s
   Uses
      At line 8 in file library.s
      At line 234 in file library.s
      At line 248 in file library.s
      At line 250 in file library.s

output_character_2 000001C4




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: output_character_2
   Definitions
      At line 210 in file library.s
   Uses
      At line 219 in file library.s
Comment: output_character_2 used once
output_string 000001EC

Symbol: output_string
   Definitions
      At line 229 in file library.s
   Uses
      At line 9 in file library.s
Comment: output_string used once
output_string_2 000001F0

Symbol: output_string_2
   Definitions
      At line 232 in file library.s
   Uses
      At line 237 in file library.s
Comment: output_string_2 used once
pin_connect_block_setup_for_uart0 00000084

Symbol: pin_connect_block_setup_for_uart0
   Definitions
      At line 53 in file library.s
   Uses
      At line 3 in file library.s
Comment: pin_connect_block_setup_for_uart0 used once
quit 00000230

Symbol: quit
   Definitions
      At line 257 in file library.s
   Uses
      At line 77 in file library.s
Comment: quit used once
read_character 00000194

Symbol: read_character
   Definitions
      At line 187 in file library.s
   Uses
      At line 7 in file library.s
Comment: read_character used once
read_character_2 00000198

Symbol: read_character_2
   Definitions
      At line 189 in file library.s
   Uses
      At line 198 in file library.s
Comment: read_character_2 used once
read_character_break 000001B8

Symbol: read_character_break
   Definitions
      At line 204 in file library.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Uses
      None
Comment: read_character_break unused
setup_pins 000000A4

Symbol: setup_pins
   Definitions
      At line 63 in file library.s
   Uses
      At line 4 in file library.s
Comment: setup_pins used once
test 00000000

Symbol: test
   Definitions
      At line 13 in file library.s
   Uses
      None
Comment: test unused
toggle_seven_seg 00000124

Symbol: toggle_seven_seg
   Definitions
      At line 134 in file library.s
   Uses
      At line 6 in file library.s
Comment: toggle_seven_seg used once
tss_exit 00000148

Symbol: tss_exit
   Definitions
      At line 155 in file library.s
   Uses
      At line 148 in file library.s
Comment: tss_exit used once
tss_off 00000140

Symbol: tss_off
   Definitions
      At line 150 in file library.s
   Uses
      At line 138 in file library.s
Comment: tss_off used once
tss_on 00000130

Symbol: tss_on
   Definitions
      At line 140 in file library.s
   Uses
      None
Comment: tss_on unused
uart_init 00000048

Symbol: uart_init
   Definitions
      At line 35 in file library.s
   Uses
      At line 2 in file library.s
Comment: uart_init used once



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

validate_input 000000BC

Symbol: validate_input
   Definitions
      At line 73 in file library.s
   Uses
      At line 5 in file library.s
Comment: validate_input used once
vi_exit 0000011C

Symbol: vi_exit
   Definitions
      At line 129 in file library.s
   Uses
      At line 109 in file library.s
      At line 123 in file library.s

vi_exit_false 00000118

Symbol: vi_exit_false
   Definitions
      At line 125 in file library.s
   Uses
      At line 83 in file library.s
      At line 86 in file library.s
      At line 94 in file library.s

vi_exit_true_let 000000EC

Symbol: vi_exit_true_let
   Definitions
      At line 96 in file library.s
   Uses
      At line 92 in file library.s
Comment: vi_exit_true_let used once
vi_exit_true_num 00000104

Symbol: vi_exit_true_num
   Definitions
      At line 111 in file library.s
   Uses
      At line 89 in file library.s
Comment: vi_exit_true_num used once
26 symbols
360 symbols in table
