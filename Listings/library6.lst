


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             library6, CODE, READWRITE
    2 00000000                 EXPORT           uart_init
    3 00000000                 EXPORT           pin_connect_block_setup_for_uar
t0
    4 00000000                 EXPORT           setup_pins
    5 00000000                 EXPORT           validate_input
    6 00000000                 EXPORT           toggle_seven_seg
    7 00000000                 EXPORT           read_character
    8 00000000                 EXPORT           output_character
    9 00000000                 EXPORT           output_string
   10 00000000                 EXPORT           new_line
   11 00000000                 EXPORT           clear_display
   12 00000000         
   13 00000000                 EXPORT           change_display_digit
   14 00000000         
   15 00000000                 EXPORT           from_ascii
   16 00000000         
   17 00000000                 EXPORT           store_input
   18 00000000                 EXPORT           get_input
   19 00000000                 EXPORT           clear_input
   20 00000000         
   21 00000000 20 20 20 
              20 00    input   =                "    ",0
   22 00000005 30 00   in_count
                               =                "0",0
   23 00000007 53 65 76 
              65 6E 20 
              73 65 67 
              6D 65 6E 
              74 20 64 
              69 73 70 
              6C 61 79 
              20 74 75 
              72 6E 65 
              64 20 6F 
              6E 00    seg_on  =                "Seven segment display turned o
n",0
   24 00000027 53 65 76 
              65 6E 20 
              73 65 67 
              6D 65 6E 
              74 20 64 
              69 73 70 
              6C 61 79 
              20 74 75 
              72 6E 65 
              64 20 6F 
              66 66 00 seg_off =                "Seven segment display turned o
ff",0
   25 00000048         
   26 00000048         digits_SET
   27 00000048 00003780        DCD              0x00003780  ; 0 
   28 0000004C 00003000        DCD              0x00003000  ; 1  
   29 00000050 00009580        DCD              0x00009580  ; 2
   30 00000054 00008780        DCD              0x00008780  ; 3
   31 00000058 0000A300        DCD              0x0000A300  ; 4
   32 0000005C 0000A680        DCD              0x0000A680  ; 5
   33 00000060 0000B680        DCD              0x0000B680  ; 6
   34 00000064 00000380        DCD              0x00000380  ; 7



ARM Macro Assembler    Page 2 


   35 00000068 0000B780        DCD              0x0000B780  ; 8
   36 0000006C 0000A380        DCD              0x0000A380  ; 9
   37 00000070 0000B380        DCD              0x0000B380  ; A
   38 00000074 0000B600        DCD              0x0000B600  ; B
   39 00000078 00003480        DCD              0x00003480  ; C
   40 0000007C 00009700        DCD              0x00009700  ; D
   41 00000080 0000B480        DCD              0x0000B480  ; E
   42 00000084 0000B080        DCD              0x0000B080  ; F 
   43 00000088                 ALIGN
   44 00000088         
   45 00000088         uart_init
   46 00000088 E92D4000        STMFD            SP!,{lr}    ;push link register
                                                             to stack
   47 0000008C E59F0320        LDR              r0, =0xE000C00C ;loads the memo
                                                            ry address 0xE000C0
                                                            0C into r0
   48 00000090 E3A01083        MOV              r1, #131    ;copies decimal 131
                                                             into r1
   49 00000094 E5801000        STR              r1, [r0]    ;stores r1 into the
                                                             memory address at 
                                                            r0
   50 00000098 E59F0318        LDR              r0, =0xE000C000 ;loads the memo
                                                            ry address 0xE000C0
                                                            00 into r0
   51 0000009C E3A01078        MOV              r1, #120    ;copies decimal 120
                                                             into r1
   52 000000A0 E5801000        STR              r1, [r0]    ;stores r1 into the
                                                             memory address at 
                                                            r0
   53 000000A4 E59F0310        LDR              r0, =0xE000C004 ;loads the memo
                                                            ry address 0xE000C0
                                                            04 into r0
   54 000000A8 E3A01000        MOV              r1, #0      ;copies decimal 0 i
                                                            nto r1
   55 000000AC E5801000        STR              r1, [r0]    ;stores r1 into the
                                                             memory address at 
                                                            r0
   56 000000B0 E59F02FC        LDR              r0, =0xE000C00C ;loads the memo
                                                            ry address 0xE000C0
                                                            0C into r0
   57 000000B4 E3A01003        MOV              r1, #3      ;copies decimal 3 i
                                                            nto r1
   58 000000B8 E5801000        STR              r1, [r0]    ;stores r1 into the
                                                             memory address at 
                                                            r0
   59 000000BC E8BD4000        LDMFD            sp!, {lr}   ;pop link register 
                                                            from stack
   60 000000C0 E12FFF1E        BX               lr          ;move pc,lr
   61 000000C4         
   62 000000C4         
   63 000000C4         pin_connect_block_setup_for_uart0
   64 000000C4 E92D4003        STMFD            sp!, {r0, r1, lr} ;Push stack
   65 000000C8 E59F02F0        LDR              r0, =0xE002C000 ; PINSEL0 load 
                                                            pinsel0 r0
   66 000000CC E5901000        LDR              r1, [r0]    ;Load pinsel0 conte
                                                            nts to r1
   67 000000D0 E3811005        ORR              r1, r1, #5  ; Or with 5 dec.
   68 000000D4 E3C1100A        BIC              r1, r1, #0xA 
                                                            ; Clear against 0xA



ARM Macro Assembler    Page 3 


                                                            
   69 000000D8 E5801000        STR              r1, [r0]    ; Store results to 
                                                            r0 in memory
   70 000000DC E8BD4003        LDMFD            sp!, {r0, r1, lr} ;Pop stack
   71 000000E0 E12FFF1E        BX               lr          ;Branch back
   72 000000E4         
   73 000000E4         setup_pins
   74 000000E4 E92D400E        STMFD            SP!,{lr, r1, r2, r3}
   75 000000E8         
   76 000000E8 E59F12D4        LDR              r1, =0xE0028008 ;IODIR for Seve
                                                            n-Seg
   77 000000EC E59F32D4        LDR              r3, =0xB784 ;Load 0xB784 (for b
                                                            it manipulation) to
                                                             r3
   78 000000F0 E5813000        STR              r3, [r1]    ;store results to r
                                                            1
   79 000000F4         
   80 000000F4 E8BD400E        LDMFD            sp!, {lr, r1, r2, r3}
   81 000000F8 E12FFF1E        BX               lr
   82 000000FC         
   83 000000FC         validate_input                       ;checks that the in
                                                            putted value (r0) i
                                                            s either hexadecima
                                                            l or 'q'
   84 000000FC E92D400E        STMFD            SP!, {lr, r1, r2, r3} ;returns 
                                                            output as boolean i
                                                            n (r4)
   85 00000100         
   86 00000100 E3500071        CMP              r0, #0x71   ;'q'
   87 00000104 0A0000A8        BEQ              quit
   88 00000108         
   89 00000108 E350000D        CMP              r0, #0xD
   90 0000010C 0A000007        BEQ              vi_valid_number
   91 00000110         
   92 00000110         ; CMP r9, #0    ;not accepting input (bar 'q') when disp
                       lay is off
   93 00000110         ; BEQ vi_invalid  
   94 00000110         
   95 00000110 E3500030        CMP              r0, #0x30   ;<0x30 invalid
   96 00000114 BA000009        BLT              vi_invalid
   97 00000118         
   98 00000118 E3500046        CMP              r0, #0x46   ;>0x66 invalid
   99 0000011C CA000007        BGT              vi_invalid
  100 00000120         
  101 00000120 E3500039        CMP              r0, #0x39   ;<=0x39 valid numbe
                                                            r
  102 00000124 DA000001        BLE              vi_valid_number
  103 00000128         
  104 00000128 E3500041        CMP              r0, #0x41   ;>=0x41 valid upper
                                                            case letter
  105 0000012C AA000001        BGE              vi_valid_letter_upper
  106 00000130         
  107 00000130         vi_valid_number
  108 00000130         
  109 00000130 E3A04001        MOV              r4, #1      ;return 1 for r4
  110 00000134         
  111 00000134 EA000002        B                vi_exit
  112 00000138         
  113 00000138         vi_valid_letter_upper



ARM Macro Assembler    Page 4 


  114 00000138         
  115 00000138 E3A04001        MOV              r4, #1      ;return 1 for r4
  116 0000013C         
  117 0000013C EA000000        B                vi_exit
  118 00000140         
  119 00000140         vi_invalid
  120 00000140         
  121 00000140 E3A04000        MOV              r4, #0      ;return 0 for r4
  122 00000144         
  123 00000144         vi_exit
  124 00000144         
  125 00000144 E8BD400E        LDMFD            SP!, {lr, r1, r2, r3}
  126 00000148 E12FFF1E        BX               lr
  127 0000014C         
  128 0000014C         from_ascii                           ; converts (singe-d
                                                            igit) number at r0 
                                                            from ascii number t
                                                            o normal number, re
                                                            turning at r4
  129 0000014C E92D400E        STMFD            SP!, {lr, r1, r2, r3}
  130 00000150         
  131 00000150 E3500039        CMP              r0, #0x39
  132 00000154 DA000000        BLE              fa_number
  133 00000158         
  134 00000158 EA000001        B                fa_upper
  135 0000015C         
  136 0000015C         fa_number
  137 0000015C         
  138 0000015C E2404030        SUB              r4, r0, #0x30
  139 00000160         
  140 00000160 EA000001        B                fa_exit
  141 00000164         
  142 00000164         fa_upper
  143 00000164         
  144 00000164 E2404041        SUB              r4, r0, #0x41
  145 00000168 E284400A        ADD              r4, r4, #10
  146 0000016C         
  147 0000016C         fa_exit
  148 0000016C         
  149 0000016C E8BD400E        LDMFD            SP!, {lr, r1, r2, r3}
  150 00000170 E12FFF1E        BX               lr
  151 00000174         
  152 00000174         toggle_seven_seg
  153 00000174 E92D4001        STMFD            SP!, {lr, r0}
  154 00000178         
  155 00000178 E3590000        CMP              r9, #0      ;check if seven seg
                                                             is off
  156 0000017C 1A000002        BNE              tss_off
  157 00000180         
  158 00000180         tss_on
  159 00000180         
  160 00000180 E3A09001        MOV              r9, #1      ;set the flag to #1
                                                             (r9) to say seven 
                                                            seg is on
  161 00000184         
  162 00000184 E1A00006        MOV              r0, r6
  163 00000188         
  164 00000188         
  165 00000188 EA000001        B                tss_exit



ARM Macro Assembler    Page 5 


  166 0000018C         
  167 0000018C         tss_off
  168 0000018C         
  169 0000018C E3A09000        MOV              r9, #0      ;set the flag to #0
                                                             (r9) to say seven 
                                                            seg is off
  170 00000190 EBFFFFFE        BL               clear_display ;clear (turn off)
                                                             display
  171 00000194         
  172 00000194         tss_exit
  173 00000194         
  174 00000194 E8BD4001        LDMFD            SP!, {lr, r0}
  175 00000198 E12FFF1E        BX               lr
  176 0000019C         
  177 0000019C         change_display_digit                 ;Displays hex value
                                                             passed in r0 at di
                                                            git r4
  178 0000019C E92D402E        STMFD            SP!,{lr, r1, r2, r3, r5}
  179 000001A0         
  180 000001A0 E3A0500F        MOV              r5, #0xF    ;mask
  181 000001A4 E1A05105        MOV              r5, r5, LSL #2
  182 000001A8         
  183 000001A8 E3540000        CMP              r4, #0
  184 000001AC 0A000005        BEQ              mask_0
  185 000001B0         
  186 000001B0 E3540001        CMP              r4, #1
  187 000001B4 0A000009        BEQ              mask_1
  188 000001B8         
  189 000001B8 E3540002        CMP              r4, #2
  190 000001BC 0A00000D        BEQ              mask_2
  191 000001C0         
  192 000001C0 E3540003        CMP              r4, #3
  193 000001C4 0A000011        BEQ              mask_3
  194 000001C8         
  195 000001C8         mask_0
  196 000001C8         
  197 000001C8 E3C55004        BIC              r5, r5, #4
  198 000001CC E59F11F0        LDR              r1, =0xE0028008
  199 000001D0 E5912000        LDR              r2, [r1]
  200 000001D4 E1822005        ORR              r2, r2, r5
  201 000001D8 E5812000        STR              r2, [r1]
  202 000001DC         
  203 000001DC EA000011        B                mask_done
  204 000001E0         
  205 000001E0         mask_1
  206 000001E0         
  207 000001E0 E3C55008        BIC              r5, r5, #8
  208 000001E4 E59F11D8        LDR              r1, =0xE0028008
  209 000001E8 E5912000        LDR              r2, [r1]
  210 000001EC E1822005        ORR              r2, r2, r5
  211 000001F0 E5812000        STR              r2, [r1]
  212 000001F4         
  213 000001F4 EA00000B        B                mask_done
  214 000001F8         
  215 000001F8         mask_2
  216 000001F8         
  217 000001F8 E3C55010        BIC              r5, r5, #0x10
  218 000001FC E59F11C0        LDR              r1, =0xE0028008
  219 00000200 E5912000        LDR              r2, [r1]



ARM Macro Assembler    Page 6 


  220 00000204 E1822005        ORR              r2, r2, r5
  221 00000208 E5812000        STR              r2, [r1]
  222 0000020C         
  223 0000020C EA000005        B                mask_done
  224 00000210         
  225 00000210         mask_3
  226 00000210         
  227 00000210 E3C55020        BIC              r5, r5, #0x20
  228 00000214 E59F11A8        LDR              r1, =0xE0028008
  229 00000218 E5912000        LDR              r2, [r1]
  230 0000021C E1822005        ORR              r2, r2, r5
  231 00000220 E5812000        STR              r2, [r1]
  232 00000224         
  233 00000224 EAFFFFFF        B                mask_done
  234 00000228         
  235 00000228         mask_done
  236 00000228         
  237 00000228 E3A09001        MOV              r9, #1
  238 0000022C E59F1198        LDR              r1, =0xE0028004 ; Base address 
                                                            
  239 00000230 E59F3198        LDR              r3, =digits_SET
  240 00000234 E1A00100        MOV              r0, r0, LSL #2 ; Each stored va
                                                            lue is 32 bits 
  241 00000238 E7932000        LDR              r2, [r3, r0] ; Load IOSET patte
                                                            rn for digit in r0 
                                                            
  242 0000023C         ;MOV r5, r5, LSL #2
  243 0000023C E1822005        ORR              r2, r2, r5
  244 00000240 E5812000        STR              r2, [r1]    ; Display (0x4 = of
                                                            fset to IOSET) 
  245 00000244         
  246 00000244 E8BD402E        LDMFD            sp!, {lr, r1, r2, r3, r5}
  247 00000248 E12FFF1E        BX               lr
  248 0000024C         
  249 0000024C         clear_display
  250 0000024C E92D4006        STMFD            SP!,{lr, r1, r2}
  251 00000250         
  252 00000250 E59F117C        LDR              r1, =0xE002800C 
                                                            ;Load P0xCLR to r1
  253 00000254 E59F217C        LDR              r2, =0xB7BC ;Load number (to r2
                                                            ) for bits of seven
                                                            -segment display
  254 00000258 E5812000        STR              r2, [r1]    ;Store number in P0
                                                            xClr at r1
  255 0000025C         
  256 0000025C E8BD4006        LDMFD            sp!, {lr, r1, r2}
  257 00000260 E12FFF1E        BX               lr
  258 00000264         
  259 00000264         read_character                       ;Begin Receive Char
                                                            acter block
  260 00000264 E92D4038        STMFD            SP!,{lr, r3, r4, r5}
  261 00000268         read_character_2
  262 00000268 E59F316C        LDR              r3, =0xE000C014 ;loads the addr
                                                            ess of uart0 into r
                                                            egister r3 
  263 0000026C         
  264 0000026C E5D34000        LDRB             r4, [r3]    ;loads the bytes at
                                                             address r3 into r4
                                                             (RXFE - RDR)



ARM Macro Assembler    Page 7 


  265 00000270         
  266 00000270 E3A05001        MOV              r5, #1      ;immediate value 1 
                                                            is copied into r5
  267 00000274 E0045005        AND              r5, r4, r5  ;logically AND r4 a
                                                            nd r5 to compare th
                                                            e LSB(RDR) of r4
  268 00000278         
  269 00000278         ;CMP r5, #1   ;if the value of r5 is one, we are ready t
                       o receive data
  270 00000278         ;BNE read_character_2  ;else redo the process
  271 00000278         
  272 00000278         ; Receiving
  273 00000278         
  274 00000278 E59F3138        LDR              r3, =0xE000C000 ;loads the addr
                                                            ess of the receive 
                                                            buffer register int
                                                            o r5
  275 0000027C E5930000        LDR              r0, [r3]    ;hex value at r3 is
                                                             loaded into r0
  276 00000280         read_character_break
  277 00000280 E8BD4038        LDMFD            sp!, {lr, r3, r4, r5}
  278 00000284 E12FFF1E        BX               lr
  279 00000288         
  280 00000288         output_character                     ;Begin Transmit Cha
                                                            racter block
  281 00000288 E92D4068        STMFD            SP!,{lr, r3, r6, r5}
  282 0000028C         output_character_2
  283 0000028C E59F3148        LDR              r3, =0xE000C014 ;loads address 
                                                            of uart0 into regis
                                                            ter r3
  284 00000290         
  285 00000290 E5D36000        LDRB             r6, [r3]    ;loads bytes at add
                                                            ress r3 into r6 (RX
                                                            FE - RDR)
  286 00000294         
  287 00000294 E3A05020        MOV              r5, #32     ;immediate value 32
                                                             (00010000) copied 
                                                            into r5  
  288 00000298 E0065005        AND              r5, r6, r5  ;logically AND r6 a
                                                            nd r5 to compare th
                                                            e 5th bit(THRE) of 
                                                            r6
  289 0000029C         
  290 0000029C E3550020        CMP              r5, #32     ;if the fifth bit i
                                                            s 1, then we are re
                                                            ady to transmit
  291 000002A0 1AFFFFF9        BNE              output_character_2 ;else we red
                                                            o the process
  292 000002A4         
  293 000002A4         ; Transmitting
  294 000002A4         
  295 000002A4 E59F510C        LDR              r5, =0xE000C000 ;loads the addr
                                                            ess of the transmit
                                                             holding register (
                                                            same as receive buf
                                                            fer)
  296 000002A8         
  297 000002A8 E5850000        STR              r0, [r5]    ;stores the value o
                                                            f r0 into the addre



ARM Macro Assembler    Page 8 


                                                            ss at r5
  298 000002AC E8BD4068        LDMFD            sp!, {lr, r3, r6, r5}
  299 000002B0 E12FFF1E        BX               lr
  300 000002B4         
  301 000002B4         output_string
  302 000002B4 E92D4003        STMFD            SP!,{lr, r0, r1}
  303 000002B8         
  304 000002B8         output_string_2
  305 000002B8 E4D40001        LDRB             r0, [r4], #1 ;Load =prompt cont
                                                            ents from memory (r
                                                            4) to r0, one byte 
                                                            at a time. Then inc
                                                            rements memory addr
                                                            ess, r4, by 1.
  306 000002BC EBFFFFFE        BL               output_character ;Branch and li
                                                            nk to output_charac
                                                            ter
  307 000002C0         
  308 000002C0 E3500000        CMP              r0,#0       ;compares r0 to nul
                                                            l terminator
  309 000002C4 1AFFFFFB        BNE              output_string_2 ;if equal we co
                                                            ntinue on with prog
                                                            ram
  310 000002C8         
  311 000002C8 EBFFFFFE        BL               new_line
  312 000002CC         
  313 000002CC E8BD4003        LDMFD            sp!, {lr, r0, r1}
  314 000002D0 E12FFF1E        BX               lr
  315 000002D4         
  316 000002D4         new_line
  317 000002D4 E92D4400        STMFD            SP!,{lr, r10}
  318 000002D8 E1A0A000        MOV              r10, r0     ;saves contents of 
                                                            r0 into r10 before 
                                                            using it
  319 000002DC E3A0000A        MOV              r0, #0xA    ;new line character
                                                             copied into r0
  320 000002E0 EBFFFFFE        BL               output_character ;branch and li
                                                            nk to output charac
                                                            ter
  321 000002E4 E3A0000D        MOV              r0, #0xD    ;carriage return co
                                                            pied into r0
  322 000002E8 EBFFFFFE        BL               output_character ;branch and li
                                                            nk to output charac
                                                            ter
  323 000002EC E1A0000A        MOV              r0, r10     ;takes saved conten
                                                            t from r10 and copi
                                                            es into r0
  324 000002F0 E8BD4400        LDMFD            sp!, {lr, r10}
  325 000002F4 E12FFF1E        BX               lr
  326 000002F8         
  327 000002F8         clear_input
  328 000002F8 E92D403E        STMFD            SP!, {lr, r1-r5}
  329 000002FC         
  330 000002FC E59F00DC        LDR              r0, =in_count ; Load in_count a
                                                            ddress
  331 00000300 E3A01030        MOV              r1, #0x30
  332 00000304 EB000020        BL               to_mem
  333 00000308         
  334 00000308 E8BD403E        LDMFD            SP!, {lr, r1-r5}



ARM Macro Assembler    Page 9 


  335 0000030C E12FFF1E        BX               lr
  336 00000310         
  337 00000310         store_input
  338 00000310 E92D403E        STMFD            SP!, {lr, r1-r5}
  339 00000314         
  340 00000314         ; IN r0 - contents of key pressed
  341 00000314         
  342 00000314 E1A03000        MOV              r3, r0
  343 00000318         
  344 00000318 E59F00C0        LDR              r0, =in_count ; Load in_count a
                                                            ddress
  345 0000031C EB00001E        BL               from_mem    ; Get value of in_c
                                                            ount
  346 00000320         
  347 00000320 E1A00001        MOV              r0, r1
  348 00000324 EBFFFFFE        BL               from_ascii
  349 00000328         
  350 00000328 E1A01004        MOV              r1, r4
  351 0000032C         
  352 0000032C E59F00B0        LDR              r0, =input  ; Load input addres
                                                            s
  353 00000330 E0800001        ADD              r0, r0, r1  ; Pre-increment r0 
                                                            (address) by r1 (# 
                                                            of elements). 
  354 00000334         
  355 00000334 E1A04001        MOV              r4, r1
  356 00000338         
  357 00000338 E1A01003        MOV              r1, r3
  358 0000033C         
  359 0000033C EB000012        BL               to_mem
  360 00000340         
  361 00000340 E59F0098        LDR              r0, =in_count
  362 00000344 E1A01004        MOV              r1, r4
  363 00000348 E2811030        ADD              r1, r1, #0x30
  364 0000034C E2811001        ADD              r1, r1, #1
  365 00000350         
  366 00000350 EB00000D        BL               to_mem
  367 00000354         
  368 00000354 E8BD403E        LDMFD            SP!, {lr, r1-r5}
  369 00000358 E12FFF1E        BX               lr
  370 0000035C         
  371 0000035C         get_input                            ;Return char in mem
                                                            ory at r0 (0 for 1s
                                                            t; 3 for 4th)
  372 0000035C E92D403E        STMFD            SP!, {lr, r1-r5}
  373 00000360         
  374 00000360 E1A02000        MOV              r2, r0      ;Which char -> r2
  375 00000364         
  376 00000364 E59F0078        LDR              r0, =input
  377 00000368 E0800002        ADD              r0, r0, r2  ;increment address 
                                                            by r2
  378 0000036C EB00000A        BL               from_mem
  379 00000370         
  380 00000370 E3510030        CMP              r1, #0x30
  381 00000374 BA000000        BLT              gi_fix
  382 00000378         
  383 00000378 EA000000        B                gi_end
  384 0000037C         
  385 0000037C         gi_fix



ARM Macro Assembler    Page 10 


  386 0000037C E3A01030        MOV              r1, #0x30
  387 00000380         
  388 00000380         gi_end
  389 00000380 E1A00001        MOV              r0, r1
  390 00000384         
  391 00000384 E8BD403E        LDMFD            SP!, {lr, r1-r5}
  392 00000388 E12FFF1E        BX               lr
  393 0000038C         
  394 0000038C         to_mem                               ;r0 - memory addres
                                                            s, r1 - contents
  395 0000038C E92D403C        STMFD            SP!, {lr, r2-r5}
  396 00000390         
  397 00000390 E5C01000        STRB             r1, [r0]
  398 00000394         
  399 00000394 E8BD403C        LDMFD            SP!, {lr, r2-r5}
  400 00000398 E12FFF1E        BX               lr
  401 0000039C         
  402 0000039C         from_mem                             ;r0 - memory addres
                                                            s, return contents 
                                                            - r1
  403 0000039C E92D403C        STMFD            SP!, {lr, r2-r5}
  404 000003A0         
  405 000003A0 E5D01000        LDRB             r1, [r0]
  406 000003A4         
  407 000003A4 E8BD403C        LDMFD            SP!, {lr, r2-r5}
  408 000003A8 E12FFF1E        BX               lr
  409 000003AC         
  410 000003AC         
  411 000003AC         
  412 000003AC         quit
  413 000003AC EBFFFFFE        BL               toggle_seven_seg
  414 000003B0 E3A07005        MOV              r7, #5
  415 000003B4                 END
              E000C00C 
              E000C000 
              E000C004 
              E002C000 
              E0028008 
              0000B784 
              E0028004 
              00000000 
              E002800C 
              0000B7BC 
              E000C014 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\library6.d -o.\objects\library6.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5
\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --p
redefine="__UVISION_VERSION SETA 524" --list=.\listings\library6.lst library6.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

change_display_digit 0000019C

Symbol: change_display_digit
   Definitions
      At line 177 in file library6.s
   Uses
      At line 13 in file library6.s
Comment: change_display_digit used once
clear_display 0000024C

Symbol: clear_display
   Definitions
      At line 249 in file library6.s
   Uses
      At line 11 in file library6.s
      At line 170 in file library6.s

clear_input 000002F8

Symbol: clear_input
   Definitions
      At line 327 in file library6.s
   Uses
      At line 19 in file library6.s
Comment: clear_input used once
digits_SET 00000048

Symbol: digits_SET
   Definitions
      At line 26 in file library6.s
   Uses
      At line 239 in file library6.s
Comment: digits_SET used once
fa_exit 0000016C

Symbol: fa_exit
   Definitions
      At line 147 in file library6.s
   Uses
      At line 140 in file library6.s
Comment: fa_exit used once
fa_number 0000015C

Symbol: fa_number
   Definitions
      At line 136 in file library6.s
   Uses
      At line 132 in file library6.s
Comment: fa_number used once
fa_upper 00000164

Symbol: fa_upper
   Definitions
      At line 142 in file library6.s
   Uses
      At line 134 in file library6.s
Comment: fa_upper used once
from_ascii 0000014C




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: from_ascii
   Definitions
      At line 128 in file library6.s
   Uses
      At line 15 in file library6.s
      At line 348 in file library6.s

from_mem 0000039C

Symbol: from_mem
   Definitions
      At line 402 in file library6.s
   Uses
      At line 345 in file library6.s
      At line 378 in file library6.s

get_input 0000035C

Symbol: get_input
   Definitions
      At line 371 in file library6.s
   Uses
      At line 18 in file library6.s
Comment: get_input used once
gi_end 00000380

Symbol: gi_end
   Definitions
      At line 388 in file library6.s
   Uses
      At line 383 in file library6.s
Comment: gi_end used once
gi_fix 0000037C

Symbol: gi_fix
   Definitions
      At line 385 in file library6.s
   Uses
      At line 381 in file library6.s
Comment: gi_fix used once
in_count 00000005

Symbol: in_count
   Definitions
      At line 22 in file library6.s
   Uses
      At line 330 in file library6.s
      At line 344 in file library6.s
      At line 361 in file library6.s

input 00000000

Symbol: input
   Definitions
      At line 21 in file library6.s
   Uses
      At line 352 in file library6.s
      At line 376 in file library6.s




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

library6 00000000

Symbol: library6
   Definitions
      At line 1 in file library6.s
   Uses
      None
Comment: library6 unused
mask_0 000001C8

Symbol: mask_0
   Definitions
      At line 195 in file library6.s
   Uses
      At line 184 in file library6.s
Comment: mask_0 used once
mask_1 000001E0

Symbol: mask_1
   Definitions
      At line 205 in file library6.s
   Uses
      At line 187 in file library6.s
Comment: mask_1 used once
mask_2 000001F8

Symbol: mask_2
   Definitions
      At line 215 in file library6.s
   Uses
      At line 190 in file library6.s
Comment: mask_2 used once
mask_3 00000210

Symbol: mask_3
   Definitions
      At line 225 in file library6.s
   Uses
      At line 193 in file library6.s
Comment: mask_3 used once
mask_done 00000228

Symbol: mask_done
   Definitions
      At line 235 in file library6.s
   Uses
      At line 203 in file library6.s
      At line 213 in file library6.s
      At line 223 in file library6.s
      At line 233 in file library6.s

new_line 000002D4

Symbol: new_line
   Definitions
      At line 316 in file library6.s
   Uses
      At line 10 in file library6.s
      At line 311 in file library6.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols


output_character 00000288

Symbol: output_character
   Definitions
      At line 280 in file library6.s
   Uses
      At line 8 in file library6.s
      At line 306 in file library6.s
      At line 320 in file library6.s
      At line 322 in file library6.s

output_character_2 0000028C

Symbol: output_character_2
   Definitions
      At line 282 in file library6.s
   Uses
      At line 291 in file library6.s
Comment: output_character_2 used once
output_string 000002B4

Symbol: output_string
   Definitions
      At line 301 in file library6.s
   Uses
      At line 9 in file library6.s
Comment: output_string used once
output_string_2 000002B8

Symbol: output_string_2
   Definitions
      At line 304 in file library6.s
   Uses
      At line 309 in file library6.s
Comment: output_string_2 used once
pin_connect_block_setup_for_uart0 000000C4

Symbol: pin_connect_block_setup_for_uart0
   Definitions
      At line 63 in file library6.s
   Uses
      At line 3 in file library6.s
Comment: pin_connect_block_setup_for_uart0 used once
quit 000003AC

Symbol: quit
   Definitions
      At line 412 in file library6.s
   Uses
      At line 87 in file library6.s
Comment: quit used once
read_character 00000264

Symbol: read_character
   Definitions
      At line 259 in file library6.s
   Uses
      At line 7 in file library6.s



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

Comment: read_character used once
read_character_2 00000268

Symbol: read_character_2
   Definitions
      At line 261 in file library6.s
   Uses
      None
Comment: read_character_2 unused
read_character_break 00000280

Symbol: read_character_break
   Definitions
      At line 276 in file library6.s
   Uses
      None
Comment: read_character_break unused
seg_off 00000027

Symbol: seg_off
   Definitions
      At line 24 in file library6.s
   Uses
      None
Comment: seg_off unused
seg_on 00000007

Symbol: seg_on
   Definitions
      At line 23 in file library6.s
   Uses
      None
Comment: seg_on unused
setup_pins 000000E4

Symbol: setup_pins
   Definitions
      At line 73 in file library6.s
   Uses
      At line 4 in file library6.s
Comment: setup_pins used once
store_input 00000310

Symbol: store_input
   Definitions
      At line 337 in file library6.s
   Uses
      At line 17 in file library6.s
Comment: store_input used once
to_mem 0000038C

Symbol: to_mem
   Definitions
      At line 394 in file library6.s
   Uses
      At line 332 in file library6.s
      At line 359 in file library6.s
      At line 366 in file library6.s




ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

toggle_seven_seg 00000174

Symbol: toggle_seven_seg
   Definitions
      At line 152 in file library6.s
   Uses
      At line 6 in file library6.s
      At line 413 in file library6.s

tss_exit 00000194

Symbol: tss_exit
   Definitions
      At line 172 in file library6.s
   Uses
      At line 165 in file library6.s
Comment: tss_exit used once
tss_off 0000018C

Symbol: tss_off
   Definitions
      At line 167 in file library6.s
   Uses
      At line 156 in file library6.s
Comment: tss_off used once
tss_on 00000180

Symbol: tss_on
   Definitions
      At line 158 in file library6.s
   Uses
      None
Comment: tss_on unused
uart_init 00000088

Symbol: uart_init
   Definitions
      At line 45 in file library6.s
   Uses
      At line 2 in file library6.s
Comment: uart_init used once
validate_input 000000FC

Symbol: validate_input
   Definitions
      At line 83 in file library6.s
   Uses
      At line 5 in file library6.s
Comment: validate_input used once
vi_exit 00000144

Symbol: vi_exit
   Definitions
      At line 123 in file library6.s
   Uses
      At line 111 in file library6.s
      At line 117 in file library6.s

vi_invalid 00000140



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols


Symbol: vi_invalid
   Definitions
      At line 119 in file library6.s
   Uses
      At line 96 in file library6.s
      At line 99 in file library6.s

vi_valid_letter_upper 00000138

Symbol: vi_valid_letter_upper
   Definitions
      At line 113 in file library6.s
   Uses
      At line 105 in file library6.s
Comment: vi_valid_letter_upper used once
vi_valid_number 00000130

Symbol: vi_valid_number
   Definitions
      At line 107 in file library6.s
   Uses
      At line 90 in file library6.s
      At line 102 in file library6.s

45 symbols
379 symbols in table
